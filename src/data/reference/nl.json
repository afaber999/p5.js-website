{
  "Home": "Home",
  "Download": "Download",
  "Start": "Start",
  "Reference": "Referentie",
  "reference-tagline": "de kracht van Processing en het bereik van JavaScript",
  "reference-search": "Zoek de API",
  "reference-menu-home": "Home",
  "reference-menu-download": "Download",
  "reference-menu-get-started": "Start",
  "reference-menu-reference": "Referentie",
  "reference-menu-libraries": "Bibliotheek",
  "reference-menu-learn": "Leren",
  "reference-menu-examples": "Voorbeelden",
  "reference-menu-books": "Boeken",
  "reference-menu-community": "Gemeenschap",
  "reference-menu-forum": "Forum",
  "reference-description1": "Kunt u niet vinden waarnaar u op zoek bent? Misschien staat het in de ",
  "reference-description2": "of",
  "reference-description3": "U kunt hier een offline versie van de referentie ",
  "reference-description4": "downloaden",
  "reference-contribute1":  "Zie je nog fouten of onvolkomenheden of heb je suggesties",
  "reference-contribute2": "laat het ons dan even weten",
  "reference-error1": "Heb je typo's of andere problemen gevonden?",
  "reference-error2": "is gedocumenteerd en gedfineerd in",
  "reference-error3": "wijzig het bestand ",
  "reference-error4": " en vraag een pull request aan!",
  "reference-error5": "",
  "reference-example": "Voorbeeld",
  "reference-description": "Beschrijving",
  "reference-extends": "Uitbreiden",
  "reference-parameters": "Parameters",
  "reference-syntax": "Syntax",
  "reference-returns": "Resultaat",
  "Libraries": "Bibliotheken",
  "Learn": "Leren",
  "Examples": "Voorbeelden",
  "Books": "Boeken",
  "Community": "Gemeenschap",
  "Contribute": "Bijdragen",
  "Forum": "Forum",
  "h1": "Referentie",
  "Color": "Kleur",
  "Shape": "Vormen",
  "Creating & Reading": "Aanmaken en Lezen",
  "Setting": "Aanpassen",
  "2D Primitives": "2D basisvormen",
  "Attributes": "Attributen",
  "Curves": "Krommingen",
  "Vertex": "(Hoek)punten",
  "3D Models": "3D modellen",
  "3D Primitives": "3D basisvormen",
  "Constants": "Constanten",
  "Structure": "Structuren",
  "Environment": "Omgeving",
  "DOM": "DOM",
  "Rendering": "Rendering",
  "Transform": "Transformeren",
  "Data": "Data",
  "Dictionary": "Dictionary",
  "Array Functions": "Array functies",
  "Conversion": "Omvormen",
  "String Functions": "String functies",
  "Events": "Events",
  "Acceleration": "Acceleratie",
  "Keyboard": "Toetsenbord",
  "Mouse": "Muis",
  "Touch": "Aanraken",
  "Image": "Images",
  "Loading & Displaying": "Laden en weergeven",
  "Pixels": "Pixels",
  "IO": "Invoer/uitvoer",
  "Input": "Input",
  "Output": "Output",
  "Table": "Tabel",
  "Time & Date": "Datum en tijd",
  "XML": "XML",
  "Math": "Wiskunde",
  "Calculation": "Rekenen",
  "Noise": "Ruis",
  "Trigonometry": "Trigonometrie",
  "Typography": "Typografie",
  "Font": "Lettertype",
  "Lights, Camera": "Camera belichting",
  "Camera": "Camera",
  "Lights": "Licht",
  "Material": "Materiaal",
  "footer1": "p5.js is gemaakt door ",
  "footer2": " en is ontwikkeld door grote groep enthousiastelingen, met de ondersteuning van de ",
  "footer3": " en de ",
  "footer4": "Ontwerp en grafische vormgeving door ",

  "p5": {
    "alpha": {
      "description": "Alpha methode kan gebruikt worden om de alpha waard (omgekeerde transparantie) uit een kleur of pixelarray te halen.",
      "params": ["Object: p5.Color | Number[] | String: CSS Color "],
      "returns": "De alpha waarde van het parameter object"
    },
    "blue": {
      "description": "Methode om de blauwe waarde uit een kleur of pixelarray te halen.",
      "params": ["p5.Color | Number[] | String: CSS Color "],
      "returns": "De blauwe kleurwaarde van het parameter object"
    },
    "brightness": {
      "description": "Methode om de helderheids waarde (HSB kleur mode) uit een kleur of pixelarray te halen.",
      "params": ["p5.Color | Number[] | String: CSS Color "],
      "returns": "De helderheids waarde van het parameter object"
    },
    "color": {
      "description": "Creëert een kleurobject voor het opslaan in variabelen van het kleurdatatype. De parameters worden geïnterpreteerd als RGB- of HSB-waarden, afhankelijk van de huidige colorMode(). De standaardmodus is RGB-waarden van 0 tot 255 en daarom zal de functie aanroep Color(255, 204, 0) een felle gele kleur retourneren. <br><br>Als slechts één waarde aan Color() wordt gegeven, zal deze geïnterpreteerd worden als een grijsschaalwaarde. Voeg een tweede waarde toe en deze wordt gebruikt voor alpha-transparantie. Wanneer drie waarden zijn opgegeven, worden deze geïnterpreteerd als RGB- of HSB-waarden. Het toevoegen van een vierde waarde is van toepassing op alpha-transparantie.<br><br>Als een enkel-reeksargument wordt opgegeven, worden RGB-, RGBA- en Hex CSS-kleurstrings en alle genoemde kleurensets ondersteund. In dit geval wordt een alpha-getalwaarde als tweede argument niet ondersteund; het RGBA format moet worden gebruikt.",     
      "params": ["Nummer :getal dat de waarde tussen wit en zwart opgeeft.",
      "Getal: alpha-waarde ten opzichte van huidig ​​kleurenbereik (standaard is 0-255)",
      "Getal: rood of tint waarde ten opzichte van het huidige kleurbereik",
      "Getal: groen of verzadigingswaarde ten opzichte van het huidige kleurbereik",
      "Getal: blauwe of helderheidswaarde ten opzichte van het huidige kleurenbereik",
      "String :een kleurstring",
      "Nummer [] :een array met de rode, groene, blauwe en alpha-componenten van de kleur",
      "p5.Color object"],
      "returns": "p5.Color object"
    },
    "green": {
      "description": "Methode om de groene waarde uit een kleur of pixelarray te halen.",
      "params": ["p5.Color | Number[] | String: CSS Color "],
      "returns": "De groene waarde van het parameter object"
    },
    "hue": {
     "description": "Methode om de kleurtint (HSB kleur mode) uit een kleur of pixelarray te halen.",
      "params": ["p5.Color | Number[] | String: CSS Color "],
      "returns": "De kleurtint van het parameter object"
     },
    "lerpColor": {
      "description": "Creërt een nieuwe kleur door het mengen van twee kleuren. De parameter amt bepaalt de mengverhouding (ïnterpolatie) tussen de twee kleurwaarden, waarbij 0.0 gelijk is aan de eerste kleur, 0.1 is zeer dicht bij de eerste kleur, 0.5 ligt halverwege tussen, enz. Een hoeveelheid onder 0 wordt behandeld als 0. Ook waarden 1 worden beperkt tot 1. Dit is anders dan het gedrag van lerp (), maar noodzakelijk omdat anders nummers buiten het bereik vreemde en onverwachte kleuren produceren.<br><br>De manier waarop kleuren worden geïnterpoleerd, is afhankelijk van de huidige kleurmodus.",
      "params": ["Getal: eerste kleur",
      "Getal: tweede kleur",
      "Getal: Mengverhouding tussen (waarde tussen 0.0 en 1.0"],
      "returns": "p5.Color: het geinterpoleerde kleur object"
    },
    "lightness": {
      "description": "Extrae el valor de luminosidad HSL de un color o de un arreglo de pixeles.",
      "params": ["p5.Color | Number[] | String: CSS Color "],
      "returns": "De licht waarde van het parameter object"
	},
    "red": {
      "description": "Methode om de rode waarde uit een kleur of pixelarray te halen.",
      "params": ["p5.Color | Number[] | String: CSS Color "],
      "returns": "De rode waarde van het parameter object"
    },
    "saturation": {
      "description": "Methode om de verzadegings waarde (HSB kleur mode) uit een kleur of pixelarray te halen.",
      "params": ["p5.Color | Number[] | String: CSS Color "],
      "returns": "De verzadegings waarde van het parameter object"
	 },
    "background": {
      "description": "De functie background() stelt de kleur in die wordt gebruikt voor de achtergrond van het canvas p5.js. De standaardachtergrond is lichtgrijs. Deze functie wordt meestal gebruikt binnen Draw () om het displayvenster aan het begin van elk frame te wissen, maar het kan binnen setup () worden gebruikt om de achtergrond in het eerste frame van de animatie in te stellen of als de achtergrond slechts eenmaal hoeft te worden ingesteld.<br><br>De kleur wordt gespecificeerd in termen van de RGB-, HSB- of HSL-kleur, afhankelijk van de huidige colorMode. (De standaardkleurenruimte is RGB, met elke waarde in het bereik van 0 tot 255). Het alfanummer heeft ook een bereik van 0 tot 255.<br><br>Als een enkel tekenreeksargument wordt opgegeven, worden RGB-, RGBA- en Hex CSS-kleurstrings en alle genoemde kleurensets ondersteund. In dit geval wordt een alpha-getalwaarde als tweede argument niet ondersteund; het RGBA-formulier moet worden gebruikt.<br><br>Een p5.Color-object kan ook worden gebruikt om de achtergrondkleur in te stellen.<br><br>Een p5.Image kan ook worden gebruikt om een achtergrondafbeelding in te stellen.",
      "params": ["p5.Color: kleur van de background (object kan gecreëerd worden door de functie color())",
               "String: String welke een kleur beschrijft, mogelijke formaten omvatten: integer rg () of rgba(), percentage rgb() of rgba(), 3-cijferige hex, 6-cijferige hex",
               "Getal: opaciteit (dekking) van de achtergrond ten opzichte van het huidige kleurbereik (standaard is 0-255)",
               "Getal: specificeert een waarde tussen wit en zwart",
               "Getal: roodwaarde of tintwaarde (afhankelijk van de huidige kleurmodus)",
               "Getal: groene of verzadigingswaarde (afhankelijk van de huidige kleurmodus)",
               "Getal: blauwe of helderheidswaarde (afhankelijk van de huidige kleurmodus)",
               "Nummer[]: een array met de rode, groene, blauwe en alpha-componenten van de kleur",
               "p5.Image: afbeelding aangemaakt mbv loadImage() of createImage(), in te stellen als achtergrond (moet dezelfde grootte hebben als het schetsvenster)"],
      "returns": ""
    },
    "clear": {
      "description": "Wist de pixels buffer. Deze functie werkt alleen op p5.Canvas-objecten gemaakt met de functie createCanvas(); het zal niet werken met het browservenster. In tegenstelling tot de grafische hoofdcontext kunnen pixels in extra grafische gebieden die met createGraphics() zijn gemaakt, geheel of gedeeltelijk transparant zijn. Met deze functie wordt alles gewist om alle pixels 100% transparant te maken.",
      "returns": ""
    },
    "colorMode": {
      "description": "De colorMode() functie verandert de manier waarop p5.js kleurgegevens interpreteert. Standaard worden de parameters voor fill(), stroke(), background() en color() gedefinieerd door waarden tussen 0 en 255 met behulp van het RGB-kleurmodel. Dit komt overeen met het instellen van colorMode(RGB, 255). Met colorMode(HSB) kunt u in plaats daarvan het HSB-systeem gebruiken. Standaard is dit colorMode (HSB, 360, 100, 100, 1). U kunt ook HSL gebruiken.<br><br>Opmerking: bestaande kleurenobjecten onthouden de modus waarin ze zijn gemaakt, zodat u modi kunt wijzigen zoals u wilt zonder het uiterlijk van bestaande objecten te beïnvloeden.",
      "params": ["Constante :RGB, HSB of HSL, corresponderend met Rood/Groen/Blauw en Tint/Verzadiging/Helderheid (of Lichtheid)",
      "Getal: bereik voor alle waarden.",
      "Getal: bereik voor rood of tint, afhankelijk van de huidige kleurmodus.",
      "Getal: bereik voor groen of verzadiging, afhankelijk van de huidige kleurmodus.",
      "Getal: bereik voor blauw of helderheid / lichtheid, afhankelijk van de huidige kleurmodus.",
      "Getal: bereik voor de alpha."],
      "returns": ""
    },
    "fill": {
      "description": "Stelt de kleur in die wordt gebruikt om vormen in te kleuren. Als u bijvoorbeeld fill(204, 102, 0) uitvoert, worden alle nieuwe vormen gevuld met oranje. Deze kleur wordt gespecificeerd in termen van de RGB- of HSB-kleur, afhankelijk van de huidige colorMode (). (De standaardkleurenruimte is RGB, met elke waarde in het bereik van 0 tot 255). De alpha waarde is standaard ook 0 tot 255.<bt><br>Ook kan ene string worden meegegeven aan de fill functie, dit kan een voor gedefinieerde kleur zijn, een RGB,RGBA of  Hex CSS-kleurstrings zijn. In deze situatie wordt een optionele een alpha waarde als tweede argument niet ondersteund; het RGBA-formulier moet worden gebruikt.<br><br>Ook is het mogelijk een p5.Color object als argument te gebruiken voor de fill functie.",      
      "params": [ "Getal: rood of tint waarde ten opzichte van het huidige kleurbereik",
        "Getal: groen of verzadigingswaarde ten opzichte van het huidige kleurbereik",
        "Getal: blauwe of helderheidswaarde ten opzichte van het huidige kleurbereik",
        "Getal: alpha waarde",
        "String: String welke een kleur beschrijft, mogelijke formaten omvatten: integer rg () of rgba(), percentage rgb() of rgba(), 3-cijferige hex, 6-cijferige hex",
        "Getal: grijswaarde (0..255)",
        "Nummer[]: een array met een rood, groen, blauw kleurwaarde en een alpha waarde",
        "p5.Color: kleur object"],
      "returns": ""
    },
    "noFill": {
      "description": "De functie noFill() zorgt ervoor dat vormen niet meer worden ingekleurd. Als zowel noStroke() en noFil() worden aangeroepen, zal er niets naar het scherm worden getekend.",
      "returns": ""
    },
    "noStroke": {
      "description": "Nadat noStroke() is aangeroepen zal er geen omtrek worden getekend. Als zowel noStroke() en noFill() worden aangeroepen, zal er niets naar het scherm worden getekend.",
      "returns": ""
    },
    "stroke": {
      "description": "Bepaalt de kleur die gebruikt wordt om lijnen en randen van figuren te tekenen. Deze kleur wordt opgegeven in RGB- of HSB-kleur, afhankelijk van de huidige kleurmodus (ingesteld met colorMode(), default is RGB met elke waarde tussen 0 en 255). Als een argument van het type string wordt opgegeven, worden de RGB-, RGBA- en hexadecimale CSS-typen ondersteund. U kunt een p5.Color object opgeven om de kleur van het pad te definiëren.",
      "params": ["Nummer|Samenstelling|String|p5.Color: waarde van grijs, rood, tint (afhankelijk van de huidige kleurmodus), of CSS-kleur string.",
      "Getal: groen of verzadigingswaarde (afhankelijk van de huidige kleurmodus)",
      "Getal: waarde van blauw of helderheid (afhankelijk van de huidige kleurenmodus)",
      "Getal: alpha waarde",
      "String :een kleurstring",
      "Getal: grijswaarde (0..255)",
      "Getal[]: een array met een rood, groen, blauw kleurwaarde en alpha kleur waarde"],
      "returns": ""
    },
    "arc": {
      "description": "De arc() functie tekent een boog naar het scherm. Als alleen x, y, w, h, start en stop parameters worden meegegeven bij de aanroep, wordt de boog getekend en opgevuld als een open cirkelsegment. Als er een modusparameter is meegegeven, wordt de boog gevuld als:<br>een open halve cirkel (OPEN)<br>een gesloten halve cirkel (CHORD)<br>als een gesloten cirkelsegment (PIE)<br>De oorsprong kan worden gewijzigd met de functie ellipseMode().<br><br> Merk op dat het tekenen van een volledige cirkel (ex: 0 tot TWO_PI) leeg zal zijn omdat 0 en TWO_PI dezelfde positie op de eenheidscirkel zijn. De beste manier om dit aan te pakken, is door in plaats daarvan de functie ellipse() te gebruiken om een ​​gesloten ellips te maken en om de arc() functie alleen te gebruiken om delen van een ovaal te tekenen.",
      "params": ["Getal: x-coördinaat van de boog",
      "Getal: y-coördinaat van de boog",
      "Getal: breedte van de boog",
      "Getal: hoogte van de boog",
      "Getal: starthoek van de boog",
      "Getal: eindhoek van de boog",
      "Constant :optionele parameter om de manier van tekenen van de boog te wijzigen. ondersteunde mogelijkheden: CHORD, PIE of OPEN"],
      "returns": ""
    },
    "ellipse": {
      "description": "Tekent een ellips (ovaal) naar het scherm. Een ellips met gelijke breedte en hoogte is een cirkel. Standaard bepalen de eerste twee parameters de locatie en bepalen de derde en vierde parameters de breedte en hoogte van de vorm in. Als er geen hoogte is opgegeven, wordt de breedte gebruikt voor zowel de breedte als de hoogte. Als een negatieve hoogte of breedte is opgegeven, wordt de absolute waarde genomen. De oorsprong kan worden gewijzigd met de functie ellipseMode ().",
      "params": ["Getal: x-coördinaat van het eerste punt.",
      "Getal: x-coördinaat van het eerste punt.",
      "Getal: breedte van de ellips.",
      "Getal: hoogte van de ellips.",
      "Integer: aantal radiale sectoren wat wordt gebruikt om de ellips te tekenen (hoger getal = meer detail)."],
      "returns": ""
    },
    "line": {
      "description": "Tekent een lijn (een direct pad tussen twee punten) naar het scherm. De line() functie variant met vier parameters tekent de lijn in 2D. Gebruik de functie stroke() om een ​​lijn te kleuren. Een lijn kan niet worden gevuld, daarom heeft de functie fill() geen invloed op de kleur van een lijn. 2D-lijnen worden standaard getekend met een breedte van één pixel, maar dit kan worden gewijzigd met de functie strokeWeight().",
      "params": ["Getal: x-coördinaat van het eerste punt.",
      "Getal: y-coördinaat van het eerste punt.",
      "Getal: x-coördinaat van het tweede punt.",
      "Getal: y-coördinaat van het tweede punt.",
      "Getal: z-coördinaat van het eerste punt.",
      "Getal: z-coördinaat van het tweede punt."],
      "returns": ""
    },
    "point": {
      "description": "Tekent een punt op het canvas (één pixel). De eerste parameter is de horizontale (x) positie voor het punt, de tweede waarde is de verticale positie voor het punt. De kleur van het punt wordt bepaald door de huidige stroke() kleurwaarde.",
      "params": ["Getal: x-coördinaat.",
      "Getal: y-coördinaat.",
      "Getal: Z-coördinaat."],
      "returns": ""
    },
    "quad": {
      "description": "De quad functie tekent een vierzijdige veelhoek. Het lijkt op een rechthoek, maar de hoeken tussen de randen zijn niet beperkt tot negentig graden. Het eerste paar parameters (x1, y1) stelt de eerste punt in en de volgende paren bepalen, met de klok mee of tegen de klok in, de hoekpunten van de vierhoek.",
      "params": ["Getal: het x-coördinaat van het eerste punt.",
      "Getal: het y-coördinaat van het eerste punt.",
      "Getal: het x-coördinaat van het tweede punt.",
      "Getal: het y-coördinaat van het tweede punt.",
      "Getal: het x-coördinaat van het derde punt.",
      "Getal: het y-coördinaat van het derde punt.",
      "Getal: het x-coördinaat van het vierde punt.",
      "Getal: het y-coördinaat van het vierde punt."],
      "returns": ""
    },
    "rect": {
      "description": "Tekent een rechthoek naar het scherm. Een rechthoek is een vierzijdige vorm waarbij iedere hoek haaks is (90 graden). Bij default bepalen de eerste twee parameters de locatie van de linkerbovenhoek, de derde de breedte en de vierde de hoogte bepaalt. De manier waarop deze parameters worden geïnterpreteerd, kan echter worden gewijzigd met de functie rectMode().<br><br>De vijfde, zesde, zevende en achtste parameters bepalen, indien opgegeven, de hoekradius voor de vier hoekpunten. Een weggelaten hoekradiusparameter wordt ingesteld op de waarde van de eerder opgegeven radiuswaarde in de parameterlijst.",
      "params": ["Getal: x-coördinaat van de rechthoek.",
      "Getal: y-coördinaat van de rechthoek.",
      "Getal: breedte van de rechthoek.",
      "Getal: hoogte van de rechthoek.",
      "Getal: optionele straal van de linkerbovenhoek.",
      "Getal: optionele straal van de rechterbovenhoek.",
      "Getal: optionele straal van de rechteronderhoek.",
      "Getal: optionele straal van de linkeronderhoek.",
      "Getal: Integer :aantal segmenten in de x-richting.",
      "Getal: Integer :aantal segmenten in de y-richting."],
      "returns": ""
    },
    "triangle": {
      "description": "Tekent een driehoek welke gedefinieerd wordt door drie punten. De eerste twee argumenten specificeren het eerste punt, de middelste twee argumenten specificeren het tweede punt en de laatste twee argumenten specificeren het derde punt.",
      "params": ["Getal: het x-coördinaat van het eerste punt.",
        "Getal: het y-coördinaat van het eerste punt.",
        "Getal: het x-coördinaat van het tweede punt.",
        "Getal: het y-coördinaat van het tweede punt.",
        "Getal: het x-coördinaat van het derde punt.",
        "Getal: het y-coördinaat van het derde punt."],
      "returns": ""
    },
    "ellipseMode": {
      "description": "Wijzigt de locatie van waaruit ellipsen worden getekend. Door de manier te veranderen waarop parameters die aan ellips () worden gegeven, worden geïnterpreteerd.<br><br>De standaardmodus is ellipseMode (CENTER), in deze mode zijn de eerste twee parameters van ellipse() het middelpunt van de vorm, terwijl de derde en vierde parameters de breedte en hoogte zijn.<br><br>ellipseMode (RADIUS) gebruikt ook de eerste twee parameters van ellipse() als middelpunt van de vorm, maar gebruikt de derde en vierde parameter om de helft van de breedte en hoogte van de vorm op te specificeren.<br><br>ellipseMode (CORNER) gebruikt de  eerste twee parameters van ellipse() als de linkerbovenhoek van de vorm, terwijl de derde en vierde parameters de breedte en hoogte zijn.<br><br>ellipseMode (CORNERS) gebruikt de eerste twee parameters van ellipse() als de locatie van een hoek van het begrenzingsvak van de ellips en de derde en vierde parameter als de locatie van de tegenoverliggende hoek.<br><br>De parameter moet in HOOFDLETTERS worden geschreven, omdat Javascript een hoofdlettergevoelige taal is.",
      "params": ["Constante: mogelijke waarden zijn CENTER, RADIUS, CORNER en CORNERS."],
      "returns": ""
    },
    "noSmooth": {
      "description": "Tekent alle geometrie vormen met gekartelde (aliased) randen. Merk op dat smooth() standaard actief is, dus is het nodig om noSmooth() aan te roepen om het afvlakken van geometrie, afbeeldingen en lettertypen uit te schakelen.",
      "returns": ""
    },
    "rectMode": {
      "description": "Wijzigt de locatie van waaruit rechthoeken worden getekend, door de mode wijzigen waarop parameters die aan rect () worden gegeven, worden geïnterpreteerd. De standaardmodus is rectMode(CORNER) zijn de eerste twee parameters van rect() als de linkerbovenhoek van de vorm interpreteert, terwijl de derde en vierde parameters de breedte en hoogte ervan zijn. <br><br>rectMode(CORNERS) gebruikt de eerste twee parameters van rect() als de locatie van één hoek, en de derde en vierde parameters als de locatie van de tegenoverliggende hoek.<br><br>rectMode(CENTER) gebruikt de eerste twee parameters van rect() als middelpunt van de vorm, terwijl de derde en vierde parameters de breedte en hoogte zijn.<br><br>rectMode(RADIUS) gebruikt ook de eerste twee parameters van rect() als middelpunt van de vorm, maar gebruikt de derde en vierde parameter om de helft van de breedte en hoogte van de vormen op te geven.<br><br>De parameter moet in HOOFDLETTERS worden geschreven, omdat Javascript een hoofdlettergevoelige taal is.",
      "params": ["Constante: mogelijke waarden zijn CORNER, CORNERS, CENTER of RADIUS."],
      "returns": ""
    },
    "smooth": {
      "description": "Tekent alle geometrie met vloeiende (anti-aliased) randen. smooth() verbetert ook de beeldkwaliteit van afbeeldingen waarvan de grootte is gewijzigd. Merk op dat smooth() standaard actief is; noSmooth() kan worden gebruikt om het afvlakken van geometrie, afbeeldingen en lettertypen uit te schakelen.",
      "returns": ""
    },
    "strokeCap": {
      "description": "Stelt de stijl in voor het renderen van lijneinden. Deze uiteinden zijn vierkant, verlengd of afgerond, en hebben bijbehorende parameters: SQUARE, PROJECT en ROND. De standaardkap is ROND.",
      "params": ["Constante: mogelijke waarden zijn SQUARE, PROJECT of ROUND."],
      "returns": ""
    },
    "strokeJoin": {
      "description": "Stelt de verbindings stijl in van lijnsegmenten die met elkaar worden verbonden. Deze verbindingen zijn verstek, afgeschuind of afgerond en gespecificeerd met de overeenkomstige parameters MITER, BEVEL en ROUND. De default is MITER.",
      "params": ["Constante: MITER, BEVEL of ROUND."],
      "returns": ""
    },
    "strokeWeight": {
      "description": "Stelt de breedte in van de lijn die wordt gebruikt voor tekenen van lijnen, punten en andere vormen. De eenheid van de breedte is een pixel.",
      "params": ["Getal: De breedte van de lijn (in pixels)"],
      "returns": ""
    },
    "bezier": {
      "description": "Hiermee tekent u een kubische Bézier-curven op het scherm. Deze curven worden gedefinieerd door een reeks anker en controlepunten. De eerste twee parameters geven het eerste ankerpunt aan en de laatste twee parameters geven het andere ankerpunt aan, die de eerste en laatste punten op de curve worden. De middelste parameters specificeren de twee besturingspunten die de vorm van de curve bepalen. Bij benadering \"trekken\" de control punten de curve naar hen toe.<br><br>Bezier-curven zijn ontwikkeld door de Franse autotechnicus Pierre Bézier en worden vaak gebruikt in computergraphics om zacht glooiende bochten te definiëren. Zie ook curve().",
      "params": ["Getal: x-coördinaat voor het eerste ankerpunt",
        "Getal: y-coördinaat voor het eerste ankerpunt",
        "Getal: x-coördinaat voor het eerste control punt",
        "Getal: y-coördinaat voor het eerste control punt",
        "Getal: x-coördinaat voor het tweede control punt",
        "Getal: y-coördinaat voor het tweede control punt",
        "Getal: x-coördinaat voor het tweede ankerpunt",
        "Getal: y-coördinaat voor het tweede ankerpunt",
        "Getal: z-coördinaat voor het eerste ankerpunt",
        "Getal: z-coördinaat voor het eerste control punt",
        "Getal: z-coördinaat voor het tweede control punt",
        "Getal: z-coördinaat voor het tweede ankerpunt"],
      "returns": ""
    },
    "bezierDetail": {
      "description": "Stelt de resolutie in waarmee de Bézier curven wordt getekend.<br><br>De standaardwaarde is 20.<br><br>Deze functie is alleen nuttig als u de WEBGL-renderer gebruikt, omdat de standaard canvas-renderer deze informatie niet gebruikt.",
      "params": ["Getal: resolutie van de curven"],
      "returns": ""
    },    
    "bezierPoint": {
      "description": "Evalueert de Bézier op positie t voor de punten a, b, c, d. De parameters a en d zijn de eerste en laatste punten op de curve en b en c zijn de control punten. De laatste parameter t varieert van 0 tot 1. Dit kan één keer gedaan worden met de x-coördinaten en een tweede keer met de y-coördinaten om de locatie van een bezier-curve op t te krijgen.",
      "params": ["Getal: coördinaat van het eerste punt op de curve",
        "Getal: coördinaat van het eerste control punt",
        "Getal: coördinaat van tweede control punt",
        "Getal: coördinaat van het tweede punt op de curve",
        "Getal: waarde tussen 0 en 1"],
      "returns": "Getal: de waarde van de Bézier op positie t"
    },
    "bezierTangent": {
      "description": "Evalueert de raaklijn aan de Bézier curve op positie t voor de punten a, b, c, d. De parameters a en d zijn de eerste en laatste punten op de curve en b en c zijn de control punten. De laatste parameter t varieert van 0 tot 1.",
      "params": ["Getal: coördinaat van het eerste punt op de curve",
        "Getal: coördinaat van het eerste control punt",
        "Getal: coördinaat van tweede control punt",
        "Getal: coördinaat van het tweede punt op de curve",
        "Getal: waarde tussen 0 en 1"],
      "returns": "Getal: de tangent waarde van de Bézier curve op positie t"
    },
    "curve": {
      "description": "Tekent een gebogen lijn op het scherm tussen twee punten, gegeven als de middelste vier parameters. De eerste twee parameters zijn een control punt, alsof de curve vanaf dit punt is ontstaan, hoewel deze niet is getekend. De laatste twee parameters beschrijven op soortgelijke wijze het andere besturingspunt.<br><br>Langere curven kunnen worden gemaakt door een reeks curve() functies samen te stellen of door curveVertex() te gebruiken. Een extra functie, curveTightness(), geeft controle over de visuele kwaliteit van de curve. De curve() functie is een implementatie van Catmull-Rom splines.",
      "params": ["Nummer :x-coördinaat voor het begin control punt",
        "Nummer :y-coördinaat voor het begin control punt",
        "Nummer :x-coördinaat voor het eerste punt",
        "Nummer :y-coördinaat voor het eerste punt",
        "Nummer :x-coördinaat voor het tweede punt",
        "Nummer :y-coördinaat voor het tweede punt",
        "Nummer :x-coördinaat voor het end control punt",
        "Nummer :y-coördinaat voor het endcontrol punt",
        "Nummer :z-coördinaat voor het begin control punt",
        "Nummer :z-coördinaat voor het eerste punt",
        "Nummer :z-coördinaat voor het tweede punt",
        "Nummer :z-coördinaat voor het end control punt"],
      "returns": ""
    },
    "_curveTightness": {
      "description": "Modifica la calidad de las formas creadas con curve() y curveVertex(). El parámetro tightness (tirantez) determina cómo la curva calza con los vértices. El valor 0.0 es el valor por defecto (este valor define las curvas Spline Catmull-Rom) y el valor 1.0 conecta todos los puntos con líneas rectas. Valores en el rango entre -5.0 y 5.0 deformarán las curvas pero las dejarán reconocibles, y a medida que los valores crecen en magnitud, se continuarán deformando.",
      "params": ["Getal: deformación de los vértices originales"],
      "returns": "the p5 object"
    },
    "_curvePoint": {
      "description": "Evalua la curva en la posición t para los puntos a, b, c, d. El parámetro t varía entre 0 y 1, los puntos a y d son puntos en la cruva, y b y c son los puntos de control. Esto puede ser hecho una vez con las coordenadas x y una segunda vez con las coordenadas y para obtener la ubicación de la curva en t.",
      "params": ["Getal: coordenada del primer punto de la curva",
        "Getal: coordenada del primer punto de control de la curva",
        "Getal: coordenada del segundo punto de control de la curva",
        "Getal: coordenada del segundo punto de la curva",
        "Getal: valor entre 0 y 1"],
      "returns": "the p5 object"
    },
    "_curveTangent": {
      "description": "Evalua la tangente de la curva en la posición t para los puntos a, b, c, d. El parámetro t varía entre 0 y 1, a y d son los puntos de la curva, b y c son los puntos de control.",
      "params": ["Getal: coordenada del primer punto de la curva",
        "Getal: coordenada del primer punto de control de la curva",
        "Getal: coordenada del segundo punto de control de la curva",
        "Getal: coordenada del segundo punto de la curva",
        "Getal: valor entre 0 y 1"],
      "returns": "la tangente en la posición t"
    },
    "_beginContour": {
      "description": "Usa las funciones beginContour() y endContour() para crear figuras negativas dentro de figuras como el centro de la letra 'O'. beginContour() empieza la grabación de los vértices para la figura y endContour() finaliza la grabación. Los vértices que definen una figura negativa deben ser definidos en la dirección opuesta a la figura exterior. Primero dibuja los vértices de la figura exterior en el orden de las manecillas del reloj, y luego para figuras internas, dibuja vértices en el sentido contrario a las manecillas del reloj. Estas funciones solo pueden ser usadas dentro de un par beginShape()/endShape() y transformaciones como translate(), rotate(), y scale() no funcionan dentro de un par beginContour()/endContour(). Tampoco es posible usar otras figuras, como elupse() o rect() dentro.",
      "returns": "el objeto p5"
    },
    "_beginShape": {
      "description": "El uso de las funciones beginShape() y endShape() permiten la creación de figuras más complejas. beginShape() empieza la grabación de vértices para una figura, mientras que endShape() termina la grabación. El valor del parámetro kind (tipo) define qué tipo de figuras serán creadas a partir de los vértices. Si no se especifica un modo, la figura puede ser cualquier polígono irregular. Los parámetros disponibles para beginShape() son POINTS, LINES, TRIANGLES, TRIANGLE_FAN, TRIANGLE_STRIP, QUADS, y QUAD_STRIP. Después de llamar a la función beginShape(), debe ser seguida por una serie de comandos vertex(). Para detener el dibujo de la figura, ejecuta endShape(). Cada figura será dibujada con el color de trazo y el color de relleno actual. Transformaciones como translate(), rotate(), y scale() no funcionan dentro de beginShape(). Tampoco es posible usar otras figuras como ellipse() o rect() dentro de beginShape().",
      "params": ["Constante: puede ser POINTS, LINES, TRIANGLES, TRIANGLE_FAN TRIANGLE_STRIP, QUADS, o QUAD_STRIP"],
      "returns": "el objeto p5"
    },
    "_bezierVertex": {
      "description": "Especifica las coordenadas de un vértice para una curva Bezier. Cada llamada a la función bezierVertex() define la posición de dos puntos de control y un punto ancla de una curva Bezier, añadiendo un nuevo segmento a la línea o figura. La primera vez que bezierVertex() es usada dentro de una llamada a beginShape(), debe ser antecedida por una llamada a la función vertex() para definir el primer punto ancla. Esta función debe ser usada entre beginShape() y endShape() y solo cuando no se ha especificado el parámetro MODE (modo) a beginShape().",
      "params": ["Getal: coordenada x del primer punto de control la curva",
        "Getal: coordenada y del primer punto de control la curva",
        "Getal: coordenada x del segundo punto de control la curva",
        "Getal: coordenada y del segundo punto de control la curva",
        "Getal: coordenada x del primer punto ancla",
        "Getal: coordenada y del primer punto ancla"],
      "returns": "el objeto p5"
    },
    "_curveVertex": {
      "description": "Especifica las coordenadas de un vértice para una curva. Esta función solo puede ser usada entre beginShape() y endShape() y cuando no se ha especificado el parámetro MODE en la función beginShape(). Los puntos primero y último en una serie de líneas curveVertex() serán usados para guiar el inicio y final de una curva. Un mínimo de cuatro puntos es requerido para dibujar una pequeña curva entre los puntos segundo y tercero, Añadir un quinto punto con curveVertex() dibujará la curva entre los puntos segundo, tercero y cuarto. La función curveVertex() es una implementación de las splines de Catmull-Rom.",
      "params": ["Getal: coordenada x del vértice",
        "Getal: coordenada y del vértice"],
      "returns": "el objeto p5"
    },
    "_endContour": {
      "description": "Usa las funciones beginContour() y endContour() para crear figuras negativas dentro de figuras como el centro de la letra 'O'. beginContour() empieza la grabación de los vértices para la figura y endContour() finaliza la grabación. Los vértices que definen una figura negativa deben ser definidos en la dirección opuesta a la figura exterior. Primero dibuja los vértices de la figura exterior en el orden de las manecillas del reloj, y luego para figuras internas, dibuja vértices en el sentido contrario a las manecillas del reloj. Estas funciones solo pueden ser usadas dentro de un par beginShape()/endShape() y transformaciones como translate(), rotate(), y scale() no funcionan dentro de un par beginContour()/endContour(). Tampoco es posible usar otras figuras, como elupse() o rect() dentro.",
      "returns": "el objeto p5"
    },
    "_endShape": {
      "description": "La función endShape() es compañera de la función beginShape() y solo puede ser ejecutada tras la ejecución de beginShape(). Cuando endshape() es ejecutada, todos los datos de imagen definidos desde la llamada anterior a beginShape() son escritos en el buffer de imagen. La constante CLOSE se usa como valor para el parámetro MODE para cerrar la figura (para conectar el comienzo con el final).",
      "params": ["Constante: usa CLOSE para cerrar la figura."],
      "returns": "el objeto p5"
    },
    "_quadraticVertex": {
      "description": "Especifica las coordenadas de vértices par curvas Bezier cuadráticas. Cada llamada a quadraticVertex() define la posición de uno de los puntos de control y ancla de una curva Bezier, añadiendo un nuevo segmento a la línea o figura. La primera vez que quadraticVertex() es usada dentro de una llamada a beginShape(), debe ser precedida por una llamada a la función vertex() para definir el primer punto ancla. Esta función debe ser usada entre un par beginShape() y endShape() y solo cuando no se ha especificado el parámetro MODE de beginShape().",
      "params": ["Getal: coordenada x del punto de control",
        "Getal: coordenada y del punto de control",
        "Getal: coordenada x del punto ancla",
        "Getal: coordenada y del punto ancla"],
      "returns": "el objeto p5"
    },
    "_vertex": {
      "description": "Todas las figuras son construidas mediante la conexión de una serie de vértices. vertex() es usado para especificar las coordenadas de los vértices para puntos, líneas, triángulos, cuadriláteros y polígonos. Es usada exclusivamente dentro de un par de funciones beginShape() y endShape().",
      "params": ["Getal: coordenada x del vértice",
        "Getal: coordenada y del vértice"],
      "returns": "el objeto p5"
    },
    "_loadModel": {
      "description": "Carga un modelo 3d desde un archivo OBJ. Una de las limitaciones del formato OBJ es que no trae incorporado un sentido de escala. Esto significa que los modelos exportados por distintos programas pueden ser de tamaños radicalmente distintos. Si tu modelo no está siendo mostrado en pantalla, trata llamando a la función loadMode() con el parámetro de normalización configurado como verdadero. Esto escalará el tamaño del modelo a una escala apropiada para p5. También puedes hacer cambios adicionales al tamaño final de tu modelo con la función scale().",
      "params": ["String: ubicación del modelo a cargar",
        "Boolean:  Si es verdadero (true), escala el modelo a un tamaño estandarizado al momento de cargarlo.",
        "Función(p5.Geometry3D): función a ser llamada cuando el modelo se cargue. Será pasada al modelo del objeto 3D.",
        "Función(evento): llamada con el error evento si la imagen no falla al cargar."],
      "returns": "el objeto p5.Geometry3D"
    },
    "_model": {
      "description": "Hace el render de un modelo 3D en la pantalla.",
      "params": ["p5.Geometry: modelo 3D cargado para realizar render"],
      "returns": "el objeto p5"
    },
    "_plane": {
      "description": "Dibuja un plano con ancho y altura dados.",
      "params": ["Getal: ancho del plano",
      "Getal: altura del plano",
      "Getal: Nummer opcional de subdivisiones triangulares en la dimensión x",
      "Getal: Nummer opcional de subdivisiones triangulares en la dimensión y"],
      "returns": "el objeto p5"
    },
    "_box": {
      "description": "Dibuja una caja con ancho, altura y profundidad dados.",
      "params": ["Getal: ancho de la caja",
      "Getal: altura de la caja",
      "Getal: profundidad de la caja",
      "Getal: Nummer opcional de subdivisiones triangulares en la dimensión x",
      "Getal: Nummer opcional de subdivisiones triangulares en la dimensión y"],
      "returns": "el objeto p5"
    },
    "_sphere": {
      "description": "Dibuja una esfera de radio dado.",
      "params": ["Getal: radio del círculo",
      "Getal: opcional, Nummer de segmentos, a mayor Nummer de segmentos la geometría es más suave, por defecto es 24",
      "Getal: opcional, Nummer de segmentos, a mayor Nummer de segmentos la geometría es más suave, por defecto es 16"],
      "returns": "el objeto p5"
    },
    "_cylinder": {
      "description": "Dibuja un cilindro de radio y altura dados.",
      "params": ["Getal: radio de la superficie",
      "Getal: altura del cilindro",
      "Getal: opcional, Nummer de segmentos, a mayor Nummer de segmentos la geometría es más suave, por defecto es 24",
      "Getal: opcional, Nummer de segmentos, a mayor Nummer de segmentos la geometría es más suave, por defecto es 16"],
      "returns": "el objeto p5"
    },
    "_cone": {
      "description": "Dibuja un cono de radio y altura dados.",
      "params": ["Getal: radio de la superficie inferior",
      "Getal: altura del cono",
      "Getal: opcional, Nummer de segmentos, a mayor Nummer de segmentos la geometría es más suave, por defecto es 24",
      "Getal: opcional, Nummer de segmentos, a mayor Nummer de segmentos la geometría es más suave, por defecto es 16"],
      "returns": "el objeto p5"
    },
    "_ellipsoid": {
      "description": "Dibuja un elipsoide de radio dado.",
      "params": ["Getal: radio x del círculo",
      "Getal: radio y del círculo",
      "Getal: radio z del círculo",
      "Getal: opcional, Nummer de segmentos, a mayor Nummer de segmentos la geometría es más suave, por defecto es 24. Evita Nummers mayores a 150 que podrían colapsar el navegador.",
      "Getal: opcional, Nummer de segmentos, a mayor Nummer de segmentos la geometría es más suave, por defecto es 16. Evita Nummers mayores a 150 que podrían colapsar el navegador."],
      "returns": "el objeto p5"
    },
    "_torus": {
      "description": "Dibuja un toroide con radio y tubo dado.",
      "params": ["Getal: radio del anillo completo",
      "Getal: radio del tubo",
      "Getal: radio z del círculo",
      "Getal: opcional, Nummer de segmentos, a mayor Nummer de segmentos la geometría es más suave, por defecto es 24.",
      "Getal: opcional, Nummer de segmentos, a mayor Nummer de segmentos la geometría es más suave, por defecto es 16."],
      "returns": "el objeto p5"
    },
    "HALF_PI": {
      "description": "HALF_PI is een wiskundige constante met de waarde 1.57079632679489661923. De verhouding (halve  circel omtrek)/(diameter) komt overeen met HALF_PI. De constante wordt veel gebruikt in combinatie met de trigonometrische functies sin () en cos ().",
      "returns": ""
    },
    "PI": {
      "description": "PI is een wiskundige constante met de waarde 3.14159265358979323846. De verhouding (circel omtrek)/(diameter) komt overeen met PI. De constante wordt veel gebruikt in combinatie met de trigonometrische functies sin () en cos ().",
      "returns": ""
    },
    "QUARTER_PI": {
      "description": "QUARTER_PI is een wiskundige constante met de waarde 0.7853982. De verhouding (kwart circel omtrek)/(diameter) komt overeen met QAURTER_PI. De constante wordt veel gebruikt in combinatie met de trigonometrische functies sin () en cos ().",
      "returns": ""
    },
    "TAU": {
      "description": "TAU is een andere benaming voor TWO_PI, het is een wiskundige constante met de waarde 6.28318530717958647693. De verhouding (2x circel omtrek)/(diameter) komt overeen met TWO_PI. De constante wordt veel gebruikt in combinatie met de trigonometrische functies sin () en cos ().",
      "returns": ""
    },
    "TWO_PI": {
      "description": "TWO_PI is een wiskundige constante met de waarde 6.28318530717958647693. De verhouding (2x circel omtrek)/(diameter) komt overeen met TWO_PI. De constante wordt veel gebruikt in combinatie met de trigonometrische functies sin() en cos().",
      "returns": ""
    },
    "preload": {
      "description": "Direct vóór de setup() functie wordt aangeroepen, wordt de preload() functie aangeroepen. Dit kan heel handig zijn om bestanden of anderen resource, die normaal gesproken asynchroon worden geladen, op een blokkerende manier af te handelen. Als een preload-functie is aanwezig is, zal het programma wachten met het aanroepe van de setup() functie totdat alle het binenhalen van all resources is voltooid. Alleen het laden van resources (loadImage, loadJSON, loadFont, loadStrings, etc.) mogen in de preload-functie zitten. Het laden van resources kan natuurlijk ook op de normale (asynchrone) worden afghandeld door gebruik te maken van een callback-functie.<br><br>Bij default wordt de tekst '''loading ...''' weergegeven. Als u uw eigen laadpagina wilt maken, voegt u een HTML-element met id '''p5_loading''' toe aan uw pagina. Meer informatie ",
      "returns": ""
    },
    "setup": {
      "description": "De functie setup  wordt één keer aangeroepen wanneer het programma start. Het wordt gebruikt om de begin toestand van het programma in te stellen, zoals schermgrootte en achtergrondkleur en om media zoals afbeeldingen en lettertypen te laden wanneer. Ieder programma kan slechts één setup() functie bevatten en deze mag niet opnieuw worden aangeroepen na deze is uitgevoerd. <br><br> Opmerking: variabelen gedeclareerd in setup() zijn niet toegankelijk in andere functies, waaronder draw ().",
      "returns": ""
    },
    "draw": {
      "description": "Direct nadat de setup() functie voltooid is, wordt de draw() functie continue aangeroepen, de coderegels in draw functie programma wordt gestopt als noLoop() wordt aangeroepen. Opmerking als noLoop() wordt opgeroepen in setup(), wordt draw() slechts één keer uitgevoerd. De draw() wordt automatisch aangeroepen en mag nooit expliciet worden aangeroepen.<br><br>Om het aanroep gedrag van de draw() functie te wijzigen moet altijd een van de volgende functies gebruikt worden: noLoop(), redraw() en loop(). Nadat noLoop() ia aangeroepen zal de code in draw() net verder worden uitgevoerd, redraw() zorgt ervoor dat de code binnen draw() één keer wordt uitgevoerd en loop() zorgt ervoor dat de code binnen draw() continu wordt uitgevoerd.<br><br>Het aantal keren dat draw() wordt uitgevoerd in elke seconde kan worden geregeld met de functie frameRate(). <br><br>Voor ieder programma kan er slechts één draw() functie zijn. De draw() functie moet bestaan ​​als u de code continu wilt laten lopen of als u gebeurtenissen zoals mousePressed() wilt verwerken. Soms heeft u misschien een lege draw() functie nodig om u programma goed te laten functioneren, zoals in het bovenstaande voorbeeld.<br><br>Verder is het is belangrijk om te weten dat het tekencoördinatensysteem aan het begin van elke draw() functie aanroep wordt gereset. Als er transformaties worden uitgevoerd binnen draw() (bijvoorbeeld: schaal, roteren, transleren), worden hun effecten aan het begin van draw() ongedaan gemaakt, zodat transformaties zich niet in de loop van de tijd accumuleren. Aan de andere kant blijft de toegepaste styling (bijv .: fill(), stroke(), enz.) wel onveranderd.",
      "returns": ""
    },
    "remove": {
      "description": "Verwijdert de gehele p5-schets. Hiermee wordt het canvas en alle elementen verwijderd die zijn gemaakt door het p5.js programma. Ook wordt de draw() loop gestopt en worden alle eigenschappen lost gekoppeld van het window. Het laat een variabele p5 achter voor het geval je een nieuwe p5-schets wilt aanmaken. Indien gewenst, kun je p5 = null instellen om het te wissen. Hoewel alle functies en variabelen en objecten die door de p5-bibliotheek zijn gemaakt, worden verwijderd, blijven alle andere algemene variabelen die door uw code zijn gemaakt, behouden.",
      "returns": ""
    },
    "noLoop": {
      "description": "P5.js roept standaard continu draw() functie aan en voert de code daarin uit. Deze continue aanroep van de draw() functie kan echter worden gestopt door de noLoop() aan te roepen. In deze situatie kan worden herstelt door de loop() functie aan te roepen.",
      "returns": ""
    },
    "loop": {
      "description": "P5.js roept standaard continu draw() functie aan en voert de code daarin uit. Deze continue aanroep van de draw() functie kan echter worden gestopt door de noLoop() aan te roepen. In deze situatie kan worden herstelt door de loop() functie aan te roepen.",
      "returns": ""
    },
    "_push": {
      "description": "La función push() graba la configuración actual de estilo de dibujo, y pop() restaura esta configuración. Notar que estas funciones siempre son usadas en conjunto. Permiten cambiar las configuraciones de estilo y transformaciones y luego volver a lo que tenías. Cuando un nuevo estado es iniciado con push(), construye encima de la información actual de estilo y transformación. Las funciones push() y pop() pueden ser embebidas para proveer más control (ver el segundo ejemplo para una demostración). push() almacena información relacionada a la configuración de estado de transformación y de estulo actual, controlada por las siguientes funciones: fill(), stroke(), tint(), strokeWeight(), strokeCap(), strokeJoin(), imageMode(), rectMode(), ellipseMode(), colorMode(), textAlign(), textFont(), textMode(), textSize(), textLeading().",
      "returns": "el objeto p5"
    },
    "_pop": {
      "description": "La función push() graba la configuración actual de estilo de dibujo, y pop() restaura esta configuración. Notar que estas funciones siempre son usadas en conjunto. Permiten cambiar las configuraciones de estilo y transformaciones y luego volver a lo que tenías. Cuando un nuevo estado es iniciado con push(), construye encima de la información actual de estilo y transformación. Las funciones push() y pop() pueden ser embebidas para proveer más control (ver el segundo ejemplo para una demostración). push() almacena información relacionada a la configuración de estado de transformación y de estulo actual, controlada por las siguientes funciones: fill(), stroke(), tint(), strokeWeight(), strokeCap(), strokeJoin(), imageMode(), rectMode(), ellipseMode(), colorMode(), textAlign(), textFont(), textMode(), textSize(), textLeading()."
    },
    "_redraw": {
      "description": "Voert de code eenmaal binnen draw () uit. Met deze functie is het mogelijk om het canvas alleen bijwerken wanneer dat nodig is, bijvoorbeeld wanneer er een mousePressed() of keyPressed () gebeurtenis (event) heeft plaatsgevonden.<br><br>Bij het structureren van een programma is het alleen zinvol om redraw() aan te roepen in een (event) callback, zoals een mousePressed() event. Dit omdat de redraw() draw () niet meteen wordt uitgevoert (er wordt alleen een vlag ingesteld die aangeeft dat een update nodig is).<br><br>De redraw() functie werkt niet correct wanneer deze binnen draw() wordt aangeroepen. Gebruik loop() en noLoop() om animaties aan/uit te schakelen.<br><br>Optioneel kunt U het aantal draw() herhalingen meegeven aan de redraw() functie.",
      "params": ["Getal: geheel getal welke aangeeft hoe vaak de draw() functie moet worden aangeroepen "],
      "returns": ""
    },
    "print": {
      "description": "De functie print() kan een text regel schrijven in het console(gebied) van uw browser. Deze functie is kan nuttig zijn voor het bekijken van gegevens die een programma produceert. Met deze print() functie wordt een nieuwe regel tekst gemaakt. Individuele elementen kunnen worden gescheiden door aanhalingstekens (\"\") en samengevoegd met de operator voor optellen (+).",
      "params": ["Alle objecten :iedere combinatie van Number, String, Object, Boolean, Array kan worden meegegeven om te printen"],
      "returns": ""
    },
    "frameCount": {
      "description": "De systeemvariabele frameCount bevat het aantal frames dat is weergegeven sinds de start van het programma. Binnen setup() is de waarde 0, na de eerste iteratie van draw functie is deze 1, etc.",
      "returns": ""
    },
    "focused": {
      "description": "De systeemvariabele focused geeft aan of het venster waarin een p5.js-programma draait '''gefocust''' is, wat betekent dat het p5.js-programma muis- of toetsenbordinvoer accepteert. Deze variabele is '''true''' als het venster is gefocust in alle andere gevallen '''false'''.",
      "returns": ""
    },
    "_cursor": {
      "description" : "Define el cursor como un símbolo predeterminado o una imagen, o hace el cursor visible si es que estaba escondido. Si estás tratando de asignar una imagen al cursor, el tamaño recomendado es 16x16 o 32x32 pixeles. No es posible cargar una imagen al cursor si estás exportando tu programa a la Web, y no todos los modos funcionan con todos los navegadores. Los valores de los parámetros x e y deben ser menores a la dimensión de la imagen.",
      "params": ["Nummer|Constante: puede ser ARROW, CROSS, HAND, MOVE, TEXT, o WAIT, o la dirección de una imagen",
      "Getal: el punto activo horizontal del cursor",
      "Getal: el punto activo vertical del cursor"],
      "returns": "el objeto p5"
    },
    "_frameRate": {
      "description": "Especifica el Nummer de cuadros mostrados por segundo. Por ejemplo, la llamada a la función frameRate(30), tratará de refrescar 30 veces por segundo. Si el procesador no es lo suficientemente rápido para mantener la tasa especificada, la tasa de cuadros por segundo no será lograda. Definir la tasa de cuadros por segundo dentro de setup() es lo recomendable. La tasa por defecto es de 60 veces por segundo. Esto es lo mismo que setFrameRate(val). Llamar a la función frameRate() sin argumentos retorna la tasa actual. Esto es lo mismo que getFrameRate(). Llamar a la función frameRate() con arugmentos que no son de tipo Nummer o no son positivos también retornarán la tasa actual.",
      "params": ["Getal: Nummer de cuadros a ser mostrados cada segundo."],
      "returns": "la tasa de cuadros por segundo (frameRate) actual"
    },
    "_noCursor": {
      "description": "Esconde el cursor.",
      "returns": "el objeto p5"
    },

    "_displayWidth": {
      "description": "Variable de sistema que almacena el ancho de la pantalla mostrada. Esto es usado para correr un programa a pantalla completa en cualquier dimensión de pantalla.",
      "returns": "el objeto p5"
    },
    "_displayHeight": {
      "description": "Variable de sistema que almacena la altura de la pantalla mostrada. Esto es usado para correr un programa a pantalla completa en cualquier dimensión de pantalla.",
      "returns": "el objeto p5"
    },
    "_windowWidth": {
      "description": "Variable de sistema que almacena el ancho interior de la ventana del navegador, equivale a window.innerWidth.",
      "returns": "el objeto p5"
    },
    "_windowHeight": {
      "description": "Variable de sistema que almacena la altura interior de la ventana del navegador, equivale a window.innerHeight.",
      "returns": "el objeto p5"
    },
    "_windowResized": {
      "description": "La función windowResized() es llamada cada vez que la ventana del navegador cambia de tamaño. Es un buen lugar para cambiar las dimensiones del lienzo o hacer cualquier otro ajuste necesario para acomodar las nuevas dimensiones de la ventana.",
      "returns": "el objeto p5"
    },
    "_width": {
      "description": "Variable de sistema que almacena el ancho del lienzo dibujado. Este valor es definido por el primer parámetro de la función createCanvas(). Por ejemplo, la llamada a la función (320, 240) define la variable width al valor 320. El valor por defecto de ancho es de 100 si es que createCanvas() no ha sido usado en el programa.",
      "returns": "el objeto p5"
    },
    "_height": {
      "description": "ariable de sistema que almacena la altura del lienzo dibujado. Este valor es definido por el primer parámetro de la función createCanvas(). Por ejemplo, la llamada a la función (320, 240) define la variable width al valor 240. El valor por defecto de ancho es de 100 si es que createCanvas() no ha sido usado en el programa.",
      "returns": "el objeto p5"
    },
    "_fullscreen": {
      "description": "Si se da un argumento, define que el bosquejo esté a pantalla completa basado en el valor del argumento. Si no se da un argumento, retorna el estado actual de pantalla completa. Notar que debido a restricciones del navegador esto solo puede ser llamado con una entrada de parte del usuario, por ejemplo, cuando se presiona el ratón como en el ejemplo.",
      "params": ["Boolean: define si el bosquejo debe estar a pantalla completa o no."],
      "returns": "Boolean: estado de pantalla completa actual"
    },
    "_pixelDensity": {
      "description": "Define el escalamiento de pixeles para monitores de alta densidad de pixeles. Por defecto, la densidad de pixeles es definida para calzar con la densidad del monitor, ejecuta pixelDensity() para que no sea así. Llamar a pixelDensity() sin argumentos retorna la densidad de pixeles actual del bosquejo.",
      "params": ["Getal: si es que el bosquejo debe ser escalado y cuánto."],
      "returns": "Getal: densidad de pixeles actual del bosquejo"
    },
    "_displayDensity": {
      "description": "Retorna la densidad de pixeles del monitor actual en que el bosquejo está corriendo.",
      "returns": "Getal: la densidad de pixeles actual del monitor"
    },
    "_getURL": {
      "description": "Retorna la URL actual.",
      "returns": "String: URL"
    },
    "_getURLPath": {
      "description": "Retorna la dirección URL como un arreglo",
      "returns": "Arreglo: los componentes de la dirección"
    },
    "_getURLParams": {
      "description": "Retorna los parámetros de la URL actual como un objeto.",
      "returns": "Objeto: parámetros de la URL"
    },
    "_createCanvas": {
      "description": "Crea un elemento canvas en el documento, y define sus dimensiones medidas en pixeles. Este método debe ser llamado solo una vez al comienzo de la función setup(). Llamar a la función createCanvas() más de una vez en un bosquejo puede resultar en comportamientos impredecibles. Si quieres más de un lienzo donde dibujar, debes usar la función createGraphics() (escondido por defecto, pero puede ser mostrado), Las variables de sistema width (ancho) y height (altura) son definidas por los parámetros pasados a la función. Si createCanvas() no es usado, la ventana tendrá un tamaño por defecto de 100 x 100 pixeles. Para más maneras de posicionar el lienzo, ver la sección de posición del lienzo.",
      "params": ["Getal: ancho del lienzo",
      "Getal: altura del lienzo",
      "Constante: P2D o WEBGL"],
      "returns": "Objeto: lienzo generado"
    },
    "_resizeCanvas": {
      "description": "Redimensiona el linezo al ancho y la altura dados. El lienzo será borrado y la función draw() será llamada inmediatamente, permitiendo que el bosquejo se ajuste al nuevo lienzo",
      "returns": "el objeto p5"
    },
    "_noCanvas": {
      "description": "Remueve el lienzo por defecto para un bosquejo de p5 que no requiere un lienzo.",
      "returns": "el objeto p5"
    },
    "_createGraphics": {
      "description": "Crea y retorna un nuevo objeto p5.Renderer. Usa esta clase si necesitas dibujar fuera de pantalla en un buffer gráfico. Los dos parámetros definen el ancho y la altura en pixeles.",
      "params": ["Getal: ancho del buffer gráfico fuera de pantalla",
      "Getal: altura del buffer gráfico fuera de pantalla",
      "Constante: P2D o WEBGL, si no se define es P2D por defecto"],
      "returns": "buffer gráfico fuera de pantalla"
    },
    "_blendMode": {
      "description": "Combina los pixeles en la ventana según el modo definido. Existen distintas maneras de combinar los pixeles de la fuente (A) con los ya existentes en la pantalla mostrada (B). TODO",
      "params": ["Constante: modo de combinar del lienzo"],
      "returns": "el objeto p5"
    },
    "_applyMatrix": {
      "description": "Multiplica la matriz actual por la especificada según los parámetros. Esto es muy lento porque tratará de calcular el inverso de la transformada, así que evítalo cuando sea posible",
      "params": ["Getal: Nummers que definen la matriz 3x2 a multiplicar",
      "Getal: Nummers que definen la matriz 3x2 a multiplicar",
      "Getal: Nummers que definen la matriz 3x2 a multiplicar",
      "Getal: Nummers que definen la matriz 3x2 a multiplicar",
      "Getal: Nummers que definen la matriz 3x2 a multiplicar",
      "Getal: Nummers que definen la matriz 3x2 a multiplicar"],
      "returns": "el objeto p5"
    },
    "_resetMatrix": {
      "description": "Reemplaza la matriz actual con la matriz identidad",
      "returns": "el objeto p5"
    },
    "_rotate": {
      "description": "Rota una figura según el monto especificado por el parámetro ángulo. Esta función toma en cuenta el modo de ángulo definido por angleMode(), así que los ángulos pueden ser ingresados en radianes o grados. Los objetos son siempre rotados según su posición relativa al origen y los Nummers positivos rotan en la dirección de las manecillas del reloj. Las transformaciones se aplican a todo lo que ocurre de forma posterior y las subsecuentes llamadas a la función acumulan el efecto. Por ejemplo, llamar a la función rotate(HALF_PI) y luego rotate(HALF_PI) equivale a una llamada a rotate(PI). Todas las transformaciones son anuladas cuando la función draw() comienza nuevamente. Técnicamente, rotate() multiplica la matriz de transformación actual por una matriz de rotación. Esta función puede ser controlada además con las funciones push() y pop().",
      "params": ["Ángulo: el ángulo de rotación, especificado en radianes o grados, dependiendo de angleMode()",
      "Getal: ángulo en radianes",
      "p5.Vector|Arreglo: eje sobre el que se rota"],
      "returns": "el objeto p5"
    },
    "_rotateX": {
      "description": "Rota en torno al eje X",
      "params": ["Getal: ángulo en radianes"],
      "returns": "el objeto p5"
    },
    "_rotateY": {
      "description": "Rota en torno al eje Y",
      "params": ["Getal: ángulo en radianes"],
      "returns": "el objeto p5"
    },
    "_rotateZ": {
      "description": "Rota en torno al eje Z,. Sólo disponible en el modo WEBGL.",
      "params": ["Getal: ángulo en radianes"],
      "returns": "el objeto p5"
    },
    "_scale": {
      "description": "Aumenta o decrementa el tamaño de una figura por medio de expandir o contraer sus vértices. Los objetos siempre escalan desde su origen relativo al sistema de coordenadas. Los valores de escalamiento son porcentajes decimales. Por ejemplo, la llamada a la función scale(2.0) aumenta la dimensión de una figura en un 200%. Las transformaciones se aplican a todo lo que ocurre después y llamadas subsecuentes a la función multiplican el efecto. Por ejemplo, llamar a scale(2.0) y luego a scale(1.5) equivale a llamar a scale(3.0). Si la función scale() es llamad dentro de draw(), la transformación es anulada cuando el bucle empieza nuevamente. El uso de esta función con el parámetro z está solo disponible en el modo WEBGL. Esta función puede también ser controlada con las funciones push() y pop().",
      "params": ["Nummer | p5.Vector| Arreglo: porcentaje a escalar del objeto, o porcentaje a esacalar del objeto en el eje x si se dan múltiples argumentos",
      "Getal: porcentaje a escalar el objeto en el eje y",
      "Getal: porcentaje a escalar el objeto en el eje z (sólo en modo WEBGL)"],
      "returns": "el objeto p5"
    },
    "_shearX": {
      "description": "Corta la figura en torno al eje x según el monto especificado por el parámetro ángulo. Los ángulos deben ser especificados según el modo actual de ángulo angleMode(). Los objetos son siempre cortados según su posición relativa al origen y los Nummers positivos cortan los objetos en la dirección de las manecillas del reloj. Las transformaciones aplican a todo lo que ocurre después y llamadas posteriores a la misma función acumulan el efecto. Por ejemplo, llamar a shearX(PI/2) y luego a shearX(PI/2) equivale a llamar a shearX(PI). Si shearX() es llamado dentro de draw(), la transformación es anulada cuando el bucle empieza nuevamente. Técnicamente, shearX() multiplica la matriz de transformación actual por una matriz de rotación. La función puede ser controlada con las funciones push() y pop().",
      "params": ["Getal: ángulo de corte especificado en radianes o grados, dependiendo del modo de ángulo actual angleMode()"],
      "returns": "el objeto p5"
    },
    "_shearY": {

        "description": "Corta la figura en torno al eje y según el monto especificado por el parámetro ángulo. Los ángulos deben ser especificados según el modo actual de ángulo angleMode(). Los objetos son siempre cortados según su posición relativa al origen y los Nummers positivos cortan los objetos en la dirección de las manecillas del reloj. Las transformaciones aplican a todo lo que ocurre después y llamadas posteriores a la misma función acumulan el efecto. Por ejemplo, llamar a shearY(PI/2) y luego a shearY(PI/2) equivale a llamar a shearY(PI). Si shearY() es llamado dentro de draw(), la transformación es anulada cuando el bucle empieza nuevamente. Técnicamente, shearY() multiplica la matriz de transformación actual por una matriz de rotación. La función puede ser controlada con las funciones push() y pop().",
        "params": ["Getal: ángulo de corte especificado en radianes o grados, dependiendo del modo de ángulo actual angleMode()"],
        "returns": "el objeto p5"
    },
    "_translate": {
      "description": "Especifica una cantidad a desplazar los objetos dentro de la ventana mostrada. El parámetro x especifica la traslación de izquierda a derecha, el parámetro y especifica la traslación de arriba a abajo. Las transformaciones son acumulativas y aplican a todo lo que ocurre después y llamadas posteriores a la misma función acumulan el efecto. Por ejemplo, llamar a translate(50, 0) y luego a translate(20, 0) equivale a llamar a translate(70, 0). Si translate() es llamado dentro de draw(), la transformación es anulada cada vez que el bucle empieza nuevamente. Esta función peude ser controlada con las funciones push() y pop().",
      "params": ["Getal: traslación izquierda-derecha",
      "Getal: traslación arriba-abajo",
      "Getal: traslación adelante-atrás (solo en modo WEBGL)"],
      "returns": "el objeto p5"
    },
    "_deviceOrientation": {
      "description": "La variable de sistema deviceOrientation siempre contiene la orientación del dispositivo. El valor de esta variable será o landscape (paisaje) o portrait (retrato). Si la información no está disponible, su valor será undefined.",
      "returns": "el objeto p5"
    },
    "_accelerationX": {
      "description": "La variable de sistema accelerationX siempré contiene la aceleración del dispositivo en el eje X. El valor es representado en unidades de metros por segundo al cuadrado.",
      "returns": "el objeto p5"
    },
    "_accelerationY": {
      "description": "La variable de sistema accelerationX siempré contiene la aceleración del dispositivo en el eje Y. El valor es representado en unidades de metros por segundo al cuadrado.",
      "returns": "el objeto p5"
    },
    "_accelerationZ": {
      "description": "La variable de sistema accelerationX siempré contiene la aceleración del dispositivo en el eje Z. El valor es representado en unidades de metros por segundo al cuadrado.",
      "returns": "el objeto p5"
    },
    "_pAccelerationX": {
      "description": "La variable de sistema pAccelerationX siempré contiene la aceleración del dispositivo en el eje X, del cuadro anterior al cuadro actual. El valor es representado en unidades de metros por segundo al cuadrado.",
      "returns": "el objeto p5"
    },
    "_pAccelerationY": {
      "description": "La variable de sistema pAccelerationY siempré contiene la aceleración del dispositivo en el eje Y, del cuadro anterior al cuadro actual. El valor es representado en unidades de metros por segundo al cuadrado.",
      "returns": "el objeto p5"
    },
    "_pAccelerationZ": {
      "description": "La variable de sistema pAccelerationZ siempré contiene la aceleración del dispositivo en el eje Z, del cuadro anterior al cuadro actual. El valor es representado en unidades de metros por segundo al cuadrado.",
      "returns": "el objeto p5"
    },
    "_rotationX": {
      "description": "La variable de sistema rotationX siempre contiene la rotación del dispositivo en el eje x. El valor está representado entre 0 y  +/-180 grados. Nota: el orden en que las rotaciones son llamadas es importante, por ejemplo, si se usan juntas, deben ser llamadas en el orden Z-X-Y, en caso contrario podría haber un comportamiento errado.",
      "returns": "el objeto p5"
    },
    "_rotationY": {
      "description": "La variable de sistema rotationX siempre contiene la rotación del dispositivo en el eje x. El valor está representado entre 0 y  +/-180 grados. Nota: el orden en que las rotaciones son llamadas es importante, por ejemplo, si se usan juntas, deben ser llamadas en el orden Z-X-Y, en caso contrario podría haber un comportamiento errado.",
      "returns": "el objeto p5"
    },
    "_rotationZ": {
      "description": "La variable de sistema rotationX siempre contiene la rotación del dispositivo en el eje y. El valor está representado entre 0 y  360 grados. A diferencia de rotationX y rotationY, esta variable está solo disponible en dispositivos equipados con una brújula interna. Nota: el orden en que las rotaciones son llamadas es importante, por ejemplo, si se usan juntas, deben ser llamadas en el orden Z-X-Y, en caso contrario podría haber un comportamiento errado.",
      "returns": "el objeto p5"
    },
    "_pRotationX": {
      "description": "La variable de sistema pRotationX siempre contiene la rotación del dispositivo en el eje x, en el cuadro anterior al actual. El valor está representado entre 0 y  +/-180 grados. pRotationX puede ser usado en conjunto con rotationX para determinar la dirección de rotación del dispositivo a lo largo del eje x.",
      "returns": "el objeto p5"
    },
    "_pRotationY": {
      "description": "La variable de sistema pRotationY siempre contiene la rotación del dispositivo en el eje x, en el cuadro anterior al actual. El valor está representado entre 0 y  +/-90 grados. pRotationY puede ser usado en conjunto con rotationY para determinar la dirección de rotación del dispositivo a lo largo del eje y.",
      "returns": "el objeto p5"
    },
    "_pRotationZ": {
      "description": "La variable de sistema pRotationZ siempre contiene la rotación del dispositivo en el eje z, en el cuadro anterior al actual. El valor está representado entre 0 y 359 grados. pRotationZ puede ser usado en conjunto con rotationZ para determinar la dirección de rotación del dispositivo a lo largo del eje z.",
      "returns": "el objeto p5"
    },
    "_setMoveThreshold": {
      "description": "La función setMoveThreshold() es usada para definir el umbral para detectar movimiento de la función deviceMoved(). El valor umbral por defecto es 0.5",
      "params": ["Getal: el valor umbral"],
      "returns": "el objeto p5"
    },
    "_setShakeThreshold": {
      "description": "La función setShakeThreshold() es usada para definir el umbral para detectar agitamiento de la función deviceShaken(). El valor umbral por defecto es 30.",
      "params": ["Getal: el valor umbral"],
      "returns": "el objeto p5"
    },
    "_deviceMoved": {
      "description": "La función deviceMoved() es llamada cuando el dispositivo es movido en una cantidad mayor al valor umbral en el eje X, Y o Z. El valor umbral por defecto es 0.5",
      "returns": "el objeto p5"
    },
    "_deviceTurned": {
      "description": "La función deviceTurned() es llamada cuando el dispositivo es girado en más de 90 grados de modo continuo. El eje que gatilla la función deviceTurned() es almacenado en la variable turnAxis. El método deviceTurned() puede ser restringido para gatillar en cualquier eje: X, Y o Z, comparando la variable turnAxis con X, Y o Z.",
      "returns": "el objeto p5"
    },
    "_deviceShaken": {
      "description": "La función deviceShaken() es llamada cuando la aceleración total de los cambios de accelerationX y accelerationY son mayores al valor umbral. El valor umbral por defecto es 30",
      "returns": "el objeto p5"
    },
    "_keyIsPressed": {
      "description": "La variable boolean de sistema keyIsPressed es verdadera (true) cuando cualquier tecla es presionada y falsa (false) si no hay ninguna tecla presionada",
      "returns": "el objeto p5"
    },
    "_key": {
      "description": "La variable de sistema key siempre contiene el valor más reciente de la tecla del teclado presionada. Para tener los mejores resultados, es mejor usarla dentro de la función keyTyped(). Para teclas sin valor ASCII, usa la variable keyCode ",
      "returns": "el objeto p5"
    },
    "_keyCode": {
      "description": "La variable keyCode es usada para detectar teclas especiales, como BACKSPACE, DELETE, ENTER, RETURN, ESCAPE, SHIFT, CONTROL, OPTION, ALT, UP_ARROW, DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW. También puedes revisar las teclas especiales buscando el código keyCode de cualquier tecla en internet.",
      "returns": "el objeto p5"
    },
    "_keyPressed": {
      "description": "La función keyPressed() es llamada una vez cada vez que una tecla es presionada. El código keyCode de la tecla presionada es almacenado en la variable keyCode. Para las teclas sin valor ASCII, usa la variable keyCode.  Puedes comprobar si la variable keyCode es igual a BACKSPACE, DELETE, ENTER, RETURN, ESCAPE, SHIFT, CONTROL, OPTION, ALT, UP_ARROW, DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW. Para las teclas con valor ASCII que son presionadas, el valor es almacenado en la variable key. Sin embargo, no distingue entre letras mayúsculas y minúsculas. Por esta razón, es recomendable usar la función keyTyped() para leer la variable key, que sí distingue entre mayúsculas y minúsculas. Por la forma en que los sistemas operativos manejan la repetición de teclas, mantener presionada una tecla puede causar múltiples llamadas a keyTyped() (y también keyReleased()). La tasa de repetición es definida por el sistema operativo y según cómo cada computador está configurado. Los navegadores tienen distintos comportamientos por defecto asociados a distintos eventos gatillados por teclas. Para prevenir cualquier comportamiento por defecto para este evento, añade return false al final de este método.",
      "returns": "el objeto p5"
    },
    "_keyReleased": {
      "description": "La función keyReleased() es llamada una vez cada vez que una tecla es soltada. Ver key y keyCode para más información. Los navegadores tienen distintos comportamientos por defecto asociados a distintos eventos gatillados por teclas. Para prevenir cualquier comportamiento por defecto para este evento, añade return false al final de este método.",
      "returns": "el objeto p5"
    },
    "_keyTyped": {
      "description": "la función keyTyped es llamada cava vez que una tecla es presionada, excepto cuando son presionadas la steclas de acción como Ctrl, Shift y Alt, que son ignoradas. La tecla presionada más reciente será almacenada en la variable key. Por la forma en que los sistemas operativos manejan la repetición de teclas, mantener presionada una tecla puede causar múltiples llamadas a keyTyped() (y también keyReleased()). La tasa de repetición es definida por el sistema operativo y según cómo cada computador está configurado. Los navegadores tienen distintos comportamientos por defecto asociados a distintos eventos gatillados por teclas. Para prevenir cualquier comportamiento por defecto para este evento, añade return false al final de este método.",
      "params": ["Getal: el valor umbral"],
      "returns": "el objeto p5"
    },
    "_keyIsDown": {
      "description": "La función keyIsDown() comprueba si la tecla está presionada. Puede ser usada si tienes un objeto que se mueve, y quieres que varias teclas sean capaces de afectar este comportamiento de manera simultánea, como cuando mueves una imagen de forma diagonal. Puedes ingresar cualquier Nummer representando el código de tecla keyCode de la tecla, o usar cualquier de los nombres de la variable keyCode.",
      "params": ["Getal: la tecla a buscar"],
      "returns": "el objeto p5"
    },
    "_mouseX": {
      "description": "La variable de sistema mouseX siempre contiene la posición horizontal actual del ratón, relativa al origen (0, 0) del lienzo.",
      "returns": "el objeto p5"
    },
    "_mouseY": {
      "description": "La variable de sistema mouseY siempre contiene la posición vertical actual del ratón, relativa al origen (0, 0) del lienzo.",
      "returns": "el objeto p5"
    },
    "_pmouseX": {
        "description": "La variable de sistema pmouseX siempre contiene la posición horizontal actual del ratón, en el cuadro anterior al actual, relativa al origen (0, 0) del lienzo.",
        "returns": "el objeto p5"
    },
    "_pmouseY": {
      "description": "La variable de sistema pmouseY siempre contiene la posición vertical actual del ratón, en el cuadro anterior al actual, relativa al origen (0, 0) del lienzo.",
      "returns": "el objeto p5"
    },
    "_winMouseX": {
      "description": "La variable de sistema winMouseX siempre contiene la posición horizontal actual del ratón, relativa al origen (0, 0) de la ventana del navegador.",
      "returns": "el objeto p5"
    },
    "_winMouseY": {
      "description": "La variable de sistema winMouseY siempre contiene la posición vertical actual del ratón, relativa al origen (0, 0) de la ventana del navegador.",
      "returns": "el objeto p5"
    },
    "_pwinMouseX": {
      "description": "La variable de sistema pwinMouseX siempre contiene la posición horizontal actual del ratón, en el cuadro anterior al actual, relativa al origen (0, 0) de la ventana del navegador.",
      "returns": "el objeto p5"
    },
    "_pwinMouseY": {
      "description": "La variable de sistema pwinMouseY siempre contiene la posición vertical actual del ratón, en el cuadro anterior al actual, relativa al origen (0, 0) de la ventana del navegador.",
      "returns": "el objeto p5"
    },
    "_mouseButton": {
      "description": "P5.js automáticamente rastrea si el botón del ratón está presionado y cuál botón está presionado. El valor de la variable de sistema mouseButton es o LEFT, RIGHT o CENTER dependiendo de cual fue el último botón presionado. Advertencia: diferentes navegadores pueden diferir.",
      "returns": "el objeto p5"
    },
    "_mouseIsPressed": {
      "description": "La variable boolean de sistema mouseIsPressed es verdadera (true) si el ratón está siendo presionado, y falsa (false) en caso contrario.",
      "returns": "el objeto p5"
    },
    "_mouseMoved": {
      "description": "La función mouseMoved() es llamada cada vez que el ratón se mueve y un botón del ratón no está siendo presionado. Los navegadores pueden tener comportamientos por defecto asociados a distintos eventos del ratón. Para prevenir cualquier comportamiento por defecto, añade return false como última línea de este método.",
      "returns": "el objeto p5"
    },
    "_mouseDragged": {
      "description": "La función mouseDragged() es llamada cada vez que el ratón se mueve y un botón del ratón está siendo presionado. Los navegadores pueden tener comportamientos por defecto asociados a distintos eventos del ratón. Para prevenir cualquier comportamiento por defecto, añade return false como última línea de este método.",
      "returns": "el objeto p5"
    },
    "_mousePressed": {
      "description": "La función mousePressed() es llamada cada vez que un botón del ratón está siendo presionado. La variable mouseButton (ver la referencia) puede ser usada para determinar cual botón está siendo presionado. Si no se define una función mousePressed(), la función touchStarted() será llamada en su reemplazo, si es que está definida. Los navegadores pueden tener comportamientos por defecto asociados a distintos eventos del ratón. Para prevenir cualquier comportamiento por defecto, añade return false como última línea de este método.",
      "returns": "el objeto p5"
    },
    "_mouseReleased": {
      "description": "La función mouseReleased() es llamada cada vez que un botón del ratón es soltado. Si no se define una función mouseReleased(), la función touchEnded() será llamada en su reemplazo, si es que está definida. Los navegadores pueden tener comportamientos por defecto asociados a distintos eventos del ratón. Para prevenir cualquier comportamiento por defecto, añade return false como última línea de este método.",
      "returns": "el objeto p5"
    },
    "_mouseClicked": {
      "description": "La función mouseClicked() es llamada cada vez que un botón del ratón es presionado y luego soltado. Los navegadores pueden tener comportamientos por defecto asociados a distintos eventos del ratón. Para prevenir cualquier comportamiento por defecto, añade return false como última línea de este método.",
      "returns": "el objeto p5"
    },
    "_mouseWheel": {
      "description": "La función mouseWheel() es llamada cada vez que se detecta un evento de rueda de ratón vertical, ya sea gatillado por un ratón o por un touchpad. La propiedad event.delta retorna el monto que el ratón ha avanzado. Estos valores pueden ser positivos o negativos, dependiendo de la dirección de navegación (en OS X con natural scrolling, los signos son invertidos).  Los navegadores pueden tener comportamientos por defecto asociados a distintos eventos del ratón. Para prevenir cualquier comportamiento por defecto, añade return false como última línea de este método. Debido al soporte actual del evento wheel en Safari, la función podría solo funcionar si return false es incluido cuando se usa Safari.",
      "returns": "el objeto p5"
    },
    "_touchX": {
      "description": "La variable de sistema touchX siempre contiene la posición horizontal de un dedo, relativo al origen (0, 0) del lienzo. Esto funciona mejor con interacciones de un dedo a la vez. Para interacciones multi-dedo, usar el arreglo touches[]",
      "returns": "el objeto p5"
    },
    "_touchY": {
      "description": "La variable de sistema touchY siempre contiene la posición vertical de un dedo, relativo al origen (0, 0) del lienzo. Esto funciona mejor con interacciones de un dedo a la vez. Para interacciones multi-dedo, usar el arreglo touches[]",
      "returns": "el objeto p5"
    },
    "_ptouchX": {
      "description": "La variable de sistema ptouchX siempre contiene la posición horizontal de un dedo, relativo al origen (0, 0) del lienzo, en el cuadro anterior al actual. Esto funciona mejor con interacciones de un dedo a la vez. Para interacciones multi-dedo, usar el arreglo touches[]",
      "returns": "el objeto p5"
    },
    "_ptouchY": {
      "description": "La variable de sistema ptouchY siempre contiene la posición vertical de un dedo, relativo al origen (0, 0) del lienzo, en el cuadro anterior al actual. Esto funciona mejor con interacciones de un dedo a la vez. Para interacciones multi-dedo, usar el arreglo touches[]",
      "returns": "el objeto p5"
    },
    "_winTouchX": {
      "description": "La variable de sistema winTouchX siempre contiene la posición horizontal de un dedo, relativo al origen (0, 0) de la ventana.",
      "returns": "el objeto p5"
    },
    "_winTouchY": {
      "description": "La variable de sistema winTouchY siempre contiene la posición vertical de un dedo, relativo al origen (0, 0) de la ventana.",
      "returns": "el objeto p5"
    },
    "_pwinTouchX": {
      "description": "La variable de sistema pwinTouchX siempre contiene la posición horizontal de un dedo, relativo al origen (0, 0) de la ventana, en el cuadro anterior al actual.",
      "returns": "el objeto p5"
    },
    "_pwinTouchY": {
      "description": "La variable de sistema pwinTouchY siempre contiene la posición verticañ de un dedo, relativo al origen (0, 0) de la ventana, en el cuadro anterior al actual.",
      "returns": "el objeto p5"
    },
    "_touches[]": {
      "description": "La variable de sistema touches[] contiene un arreglo de las posiciones de todos los puntos de toque actuales, relativos al origen (0, 0) del lienzo, y también identificadores para cada toque mientras se mueve. Cada elemento en el arreglo es un objeto con las propiedas x, y e identidad.",
      "returns": "el objeto p5"
    },
    "_touchIsDown": {
      "description": "La variable boolean de sistema touchIsDown es verdadera (true) si en la pantalla hay un toque y falsa (false) si no.",
      "returns": "el objeto p5"
    },
    "_touchStarted": {
      "description": "La función touchStarted() es llamada una vez, cada vez que un toque nuevo es registrado. Si la función touchStarted() no ha sido definida, la función mouseIsPressed() será llamada en su lugar, si es que está definida. Los navegadores tienen distintos comportamientos por defecto asociados a distintos eventos gatillados por toque. Para prevenir cualquier comportamiento por defecto para este evento, añade return false al final de este método.",
      "returns": "el objeto p5"
    },
    "_touchMoved": {
      "description": "La función touchStarted() es llamada una vez, cada vez que es registrado el movimiento de un toque. Si la función touchMoved() no ha sido definida, la función mouseDragged() será llamada en su lugar, si es que está definida. Los navegadores tienen distintos comportamientos por defecto asociados a distintos eventos gatillados por toque. Para prevenir cualquier comportamiento por defecto para este evento, añade return false al final de este método.",
      "returns": "el objeto p5"
    },
    "_touchEnded": {
      "description": "La función touchEnded() es llamada una vez, cada vez que un toque finaliza. Si la función touchEnded() no ha sido definida, la función mouseReleased() será llamada en su lugar, si es que está definida. Los navegadores tienen distintos comportamientos por defecto asociados a distintos eventos gatillados por toque. Para prevenir cualquier comportamiento por defecto para este evento, añade return false al final de este método.",
      "returns": "el objeto p5"
    },
    "_createImage": {
      "description": "Crea una nueva p5.Image (el tipo de datos para almacenar imágenes). Esto provee un nuevo buffer de pixeles para jugar. Define el tamaño del buffer con los parámetros de ancho y altuar. .pixels da acceso a un arreglo conteniendo los valores de todos los pixeles en la ventana mostrada. Estos valores son Nummers. Este arreglo es del tamaño (incluyendo un factor apropiado de pixelDensity) de la ventana mostrada x4, representando los valroes R, G, B, A en orden para cada pixel., moviendo de izquierda a derecha en cada fila, y luego bajando de columna. Ver .pixels para mayor información. Podría ser más simple usar set() y get(). Antes de acceder a los pixeles de una imagen, los datos deben ser cargados con la función loadPixels(). Después de que el arreglo de datos ha sido modificado, la función updatePixels() debe ejecutarse para actualizar los cambios.",
      "params": ["Entero: ancho en pixeles",
      "Entero: altura en pixeles"],
      "returns": "el objeto p5"
    },
    "_saveCanvas": {
      "description": "Graba el lienzo actual como una imagen. En Safari, esto abrirá la imagen en la ventana y el usuario deberá proveer su propio nombre de archivo. Otros navegadores o grabarán el archivo de inmediato, o abrirán una ventana de diálogo.",
      "params": ["Canvas seleccionado: una variable representando un canvas HTML5 específico (opcional)",
      "String",
      "String: jpg o png"],
      "returns": "el objeto p5"
    },
    "_saveFrames": {
      "description": "Captura una secuencia de cuadros que pueden ser usados para crear una película. Acepta una función callback. Por ejemplo, puedes querer mandar los cuadros a un servidor donde pueden ser almacenados o convertidos en una película. Si no se provee una función callback, el navegador abrirá varios diálogos tratando de descargar todas las imágenes que han sido creadas. Con una función callback provista, los datos de imagen no son grabados por defecto, sino que son pasados como argumento a la función callback como un arreglo de objetos, con el tamaño del arreglo siendo igual al Nummer total de cuadros.",
      "params": ["String: ",
      "String: jpg o png",
      "Getal: duración en segundos para grabar los cuadros",
      "Getal: tasa de cuadros por segundo a grabar",
      "Función: una función callback que será ejecutada para manejar los datos de imagen. Esta función deberá aceptar un arreglo como argumento. El arreglo contendrá el Nummer especificado de cuadros como objetos. Cada objeto tiene tres propiedades: datos de imagen imageData, nombre del archivo y extensión"],
      "returns": "el objeto p5"
    },
    "_loadImage": {
      "description": "Carga una imagen desde una ruta de archivo y crea un objeto p5.Image. La imagen puede no estar inmediatamente disponible para render. Si quieres asegurarte que esté lista antes de hacer algo con ella, ubica la función loadImage() dentro de preload(). También puedes proveer una función callback para manejar la imagen cuando esté lista. La ruta a la imagen debe ser relativa al archivo HTML de tu bosquejo. Cargar desde una URL u otra ubicación remota podría estar bloqueado por las opciones de seguridad del navegador.",
      "params": ["String: ruta de la imagen a cargar",
      "Función(p5.Image): función a ser llamada una vez que la imagen sea cargada. Le será pasado el objeto p5.Image",
      "Función(evento): llamada con el evento error si es que la carga de la imagen falla."],
      "returns": "el objeto p5"
    },
    "_image": {
      "description": "Dibuja una imagen en el lienzo principal del bosquejo p5.js.",
      "params": ["p5.Image: la imagen a mostrar",
      "Getal: la coordenada x donde se ubicará la esquina superior de la imagen",
      "Getal: la coordenada y donde se ubicará la esquina superior de la imagen",
      "Getal: ancho de la imagen a dibujar",
      "Getal: altura de la imagen a dibujar",
      "Getal: la coordenada x en el lienzo de destino donde se ubicará la esquina superior izquierda de la imagen",
      "Getal: la coordenada y en el lienzo de destino donde se ubicará la esquina superior izquierda de la imagen",
      "Getal: ancho de la imagen a dibujar en el lienzo de destino",
      "Getal: altura de la imagen a dibujar en el lienzo de destino",
      "Getal: la coordenada x de la esquina superior izquierda del subrectángulo de la imagen original a dibujar en el lienzo de destino",
      "Getal: la coordenada y de la esquina superior izquierda del subrectángulo de la imagen original a dibujar en el lienzo de destino",
      "Getal: el ancho del subrectángulo de la imagen original a dibujar en el lienzo de destino",
      "Getal: la altura del subrectángulo de la imagen original a dibujar en el lienzo de destino"],
      "returns": "el objeto p5"
    },
    "_tint": {
      "description": "Define el valor de relleno para mostrar imágenes. Las imágenes pueden ser teñidas en colores específicos o hacerse transparentes al incluir un valor alpha. Para aplicar transparencia a una imagen sin afectar su color, usa blanco como color de teñido y especifica un valor alpha. Por ejemplo, tint(255, 128) hará una imagen 50% transparente (asumiendo el rango alpha por defecto entre 0 y 255, el que puede ser modificado con la función colorMode()). El valor del parámetro gris debe ser menor o igual al actual valor máximo según lo especificado por colorMode(). El valor máximo por defecto es 255.",
      "params": ["Nummer|Arreglo: valor de gris, rojo o tinte (dependiendo del modo de color actual), o un arreglo de colores",
      "Nummer|Arreglo: valor de verde o saturación (dependiendo del modo de color actual)",
      "Nummer|Arreglo: valor de azul o brillo (dependiendo del modo de color actual)",
      "Nummer|Arreglo: opacidad del fondo"],
      "returns": "el objeto p5"
    },
    "_noTint": {
      "description": "Remueve el valor actual de relleno para mostrar imágenes y revierte a mostrar las imágenes con sus colores originales.",
      "returns": "el objeto p5"
    },
    "_imageMode": {
      "description": "Define el modo de imagen. Modifica la ubicación desde la que las imágenes son dibujadas, por medio de cambiar la manera en que los parámetros dados a image() son interpretados. El modo por defecto es imageMode(CORNER), que interpreta los paráemtros segundo y tercero de image() como la posición de la esquina superior izquierda de la imagen. Si se dan dos parámetros adicionales, son usados para definir el ancho y la altura la imagen. imageMode(CORNERS) interpreta los paráemtros segundo y tercero de image() como la ubicación de una esquina, y los parámetros cuarto y quinto como la ubicación de la esquina opuesta. imageMode(CENTER) interpreta los parámetros segundo y tercero de image() como el punto central de la imagen. Si dos parámetros adicionales son especificados, son usados para definir el ancho y la altura de la imagen.",
      "params": ["Constante: puede ser CORNER, CORNERS, o CENTER"],
      "returns": "el objeto p5"
    },
    "_pixels[]": {
      "description": "Arreglo tipo Uint8ClampedArray conteniendo los valores de todos los pixeles en la ventana mostrada. Estos valores son Nummers. Este arreglo es del tamaño (incluyendo el factor apropiado de pixelDensity) de la ventana desplegada x4, representando los valores R, G, B, A por cada pixel, moviéndose de izquierda a derecha en cada fila, bajando una columna a la vez. Los monitores Retina y otros de alta densidad tendrán más pixeles en el arreglo (por un factor de pixelDensity al cuadrado). Por ejemplo, si la imagen es de 100 x 100 pixeles, habrán 40.000 valores. En un monitor retina, habrán 160.000. Los primeros cuatro valores (índices 0 a 4) en el arreglo serán los valores R, G, B, A del pixel en la posición (0, 0). Los siguientes cuatro valores (índices 4 a 7) serán los valores R, G, B, A del pixel en la posición (1, 0). De forma más general, para definir los valores de un pixel en (x, y): TODO. Aunque el método descrito es complejo, es lo suficientemente flexible como para trabajar con cualquier densidad de pixeles. Notar que set() inmediatamente se hace cargo de definir los valores apropiados en el arreglo pixels[] para un (x, y) dado a cualquier densidad de pixeles, pero el desempeño puede ser no tan rápido cuando muchas modificaciones son hechas en el arreglo de pixeles. Antes de acceder a este arreglo, los datos deben ser cargados con la función loadPixels(). Después de que el arreglo de datos ha sido modificado, la función updatePixels() debe ser ejecutada para refrescar los cambios. Notar que este no es un arreglo standard de Javascript. Esto significa que las funciones Javascript como slice() o arrayCopy() no funcionan.",
      "returns": "el objeto p5"
    },
    "_blend": {
      "description": "Copia una región de pixeles de una imagen a otra, usando un modo específico de mezcla para hacer la operación. Los modos disponibles de mezcla son: BLEND | DARKEST | LIGHTEST | DIFFERENCE | MULTIPLY| EXCLUSION | SCREEN | REPLACE | OVERLAY | HARD_LIGHT | SOFT_LIGHT | DODGE | BURN | ADD | NORMAL",
      "params": ["p5.Image: imagen fuente",
      "Entero: coordenada x de la esquina superior izquierda de la fuente",
      "Entero: coordenada y de la esquina superior izquierda de la fuente",
      "Entero: ancho de la imagen fuente",
      "Entero: altura de la imagen fuente",
      "Entero: coordenada x de la esquina superior izquierda del destino",
      "Entero: coordenada y de la esquina superior izquierda del destino",
      "Entero: ancho de la imagen destino",
      "Entero: altura de la imagen destino",
      "Constante: el modo de mezcla"],
      "returns": "el objeto p5"
    },
    "_copy": {
      "description": "Copia una región del lienzo a otra región del lienzo desde una imagen usada como el parámetro srcImage en el lienzo. Si la fuente y el destino no son del mismo tamaño, automáticamente redimensionará los pixeles de la fuente para calzar con la región especificada como destino.",
      "params": ["p5.Image: imagen fuente",
      "Entero: coordenada x de la esquina superior izquierda de la fuente",
      "Entero: coordenada y de la esquina superior izquierda de la fuente",
      "Entero: ancho de la imagen fuente",
      "Entero: altura de la imagen fuente",
      "Entero: coordenada x de la esquina superior izquierda de destino",
      "Entero: coordenada y de la esquina superior izquierda de destino",
      "Entero: ancho de la imagen de destino",
      "Entero: altura de la imagen de destino"],
      "returns": "el objeto p5"
    },
    "_filter": {
        "description": "Aplica un filtro al lienzo. Las opciones posibles son: THRESHOLD, que convierte la imagen a pixeles blancos y negros dependiendo de si están arriba o abajo del umbral definido por el parámetro. El parámetro debe estar entre 0.0 (negro) y 1.0 (blanco). Si no se especifica ningún valor, el valor por defecto es 0.5. GRAY, convierte cualquier color en la imagen a un equivalente en la escala de grises, no tiene parámetros. OPAQUE, hace que el canal alpha sea totalmente opaco, no tiene parámetros. INVERT, hace que cada pixel tenga su valor inverso, no tiene parámetros. POSTERIZE, limita cada canal de la imagen a un Nummer de colores especificado como parámetro. El parámetro puede definir entre 2 y 255 valores, pero los resultados más notorios se dan con valores bajos. BLUR, hace que la imagen sea borrosa con un proceso Gaussiano, siendo el parámetro el nivel de cuán borroso es el resultado, si no se usa ningún parámetro, el parámetro por defecto es 1, a mayores valores es más borroso el resultado. ERODE, reduce las áreas claras, no tiene parámetros. DILATE, aumenta las áreas claras, no tiene parámetros.",
        "params": ["Constante: ",
        "Getal: un parámetro opcional único a cada filtro, ver más arriba"],
        "returns": "el objeto p5"
    },
    "_get": {
      "description": "Retorna un arreglo de valores RGBA por cada pixel o toma una sección de una imagen. Si no especifican parámetros, se retorna la imagen entera. Usa los parámetros x e y para obtener el valor de un pixel. Toma una sección de la ventana mostrada si especificas los parámetros adicionales w y h. Cuando se obtiene una imagen, los parámetros x e y definen las coordenadas de la esquina superior izquierda de la imagen, sin importar el actual mode imagen definido por imageMode(). Si el pixel solicitado está fuera de la imagen, se retorna el valor [0, 0, 0, 255]. Para obtener los Nummers escalados según los rangoes de color actuales y tomar en cuenta el modo de color según colorMode(), usa getColor() en vez de get(). Tomar el valor de un pixel con get(x, y) es fácil, pero no tan rápido como tomar los datos directamente desde pixels[]. La instrucción equivalente a get(x, y) usando pixels[] con densidad de pixeles d es  var off = (y width + x) d * 4; [pixels[off], pixels[off+1], pixels[off+2], pixels[off+3]]. Ver la referencia de pixels[] para mayor información.",
      "params": ["Getal: coordenada x del pixel",
      "Getal: coordenada y del pixel",
      "Getal: ancho",
      "Getal: altura"],
      "returns": "Arreglo|p5.Image: valores de pixel en la posición (x, y) en formato arreglo RGBAs o p5.Image"
    },
    "_loadPixels": {
      "description": "Carga los datos de los pixeles en pantalla al arreglo pixels[]. Esta función siempre debe ser llamada antes de leer o escribir en el arreglo pixels[]",
      "returns": "el objeto p5"
    },
    "_set": {
      "description": "Cambia el color de cualquier pixel, o pone una imagen directamente en la ventana. Los parámetros x e y especifican el pixel a cambiar y c especifica el valor del color. Puede ser un objeto p5.Color o un arreglo de pixeles RGBA. También puede ser un valor único en escala de grises. Cuando se define una imagen, los parámetros x e y definen las coordenadas de la esquina superior izquierda de la imagen, sin importar el modo actual de imagen según imageMode(). Después de usar set(), debes llamar a updatePixels()' para que tus cambios aparezcan. Esta función debería ser llamada una vez que todos los pixeles han sido definidos. Definir el color de un solo pixel con set(x, y) es fácil, pero es tan rápido como poner los datos directamente en el arreglo pixels[]. Definir los valores de pixels[] directamente puede ser complicado cuando se trabaja con un monitor retina, pero tendrá un mejor desempeño cuando muchos pixeles necesiten ser definidos directamente en cada iteración. Ver la referencia de pixels[] para mayor información.",
      "params": ["Getal: coordenada x del pixel",
      "Getal: coordenada x del pixel",
      "Getal: coordenada y del pixel",
      "Nummer|Arreglo|Objeto: inserta un valor en escala de grises | un arreglo de pixeles | un objeto p5.Color | un objeto p5.Image a copiar"],
      "returns": "el objeto p5"
    },
    "_updatePixels": {
      "example": "",

      "description": "Actualiza la ventana mostrada con los datos del arreglo pixels[]. Se usa en conjunto con loadPixels(). Si solo estás leyendo pixeles desde el arreglo, no hay necesidad de llamar a updatePixels() - actualizar es solo necesario para aplicar cambios. updatePixels() debe ser llamada cada vez que el arreglo de pixeles es manipulado o si se llama a la función set().",
      "params": ["Getal: coordenada x de la esquina superior izquierda de la región a actualizar",
      "Getal: coordenada y de la esquina superior izquierda de la región a actualizar",
      "Getal: ancho de la región a actualizar",
      "Getal: altura de la región a actualizar"],
      "returns": "el objeto p5"
    },
    "_loadFont": {
      "description": "Carga un archivo de fuente de letra (.otf, .ttf) desde un archivo o URL, y retorna un objeto PFont. Este método es asíncrono, lo que significa que puede que no finalice antes de que la siguiente línea en tu bosquejo sea ejecutada. La ubicación del archivo debe ser relativo al archivo HTML que lo vincula con tu bosquejo. Cargar desde una URL u otra ubicación remota puede ser bloqueado por las opciones de seguridad del navegador.",
      "params": ["String: Nummer del archivo o URL a cargar",
      "Función: función a ser ejecutada después de que loadFont() es completada"],
      "returns": "Objeto: objeto p5.Font"
    },
    "_loadJSON": {
      "description": "Carga un archivo JSON desde un archivo o una URL, y retorna un objeto o un arreglo. Este método es asíncrono, lo que significa que puede que no termine antes que se ejecute la siguiente línea en tu bosquejo.",
      "params": ["String: nombre de archivo o URL a cargar",
      "Función: función a ser ejecutada después de que loadJSON() finalice, los datos son pasados como primer argumento",
      "Función: función a ser ejecutada si es que hay un error, la respuesta es pasada como primer argumento",
      "String: json o jsonp"],
      "returns": "Objeto|Arreglo: datos JSON"
    },
    "_loadStrings": {
      "description": "Lee los contenidos de un archivo y crea un arreglo de Strings de sus líneas individuales. Si el nombre del archivo es usado como parámetro, como en el ejemplo anterior, el archivo debe estar ubicado en el directorio del bosquejo. Alternativamente, el archivo puede ser cargado desde cualquier lugar del computador local usando una dirección absoluta (empieza con / en Unix y Linux, o una letra representando el disco en Windows), o el parámetro de nombre de archivo puede ser una URL donde esté el archivo dentro de una red. Este método es asíncrono, lo que significa que puede ser que su ejecución no termine antes de que se ejecute la siguiente línea del bosquejo.",
      "params": ["String: nombre de archivo o URL a cargar",
      "Función: función a ser ejecutada después de que loadStrings() finalice, el arreglo es pasado como primer argumento",
      "Función: función a ser ejecutada si es que hay un error, la respuesta es pasada como primer argumento"],
      "returns": "Arreglo: un arreglo de Strings"
    },
    "_loadTable": {
      "description": "Lee los contenidos de un archivo o URL y crea un objeto p5.Table con sus valores. Si un archivo es especificado, debe ser ubicado en el directorio data del bosquejo. El parámetro de nombre de archivo puede también ser una URL de un archivo en línea. Por defecto, se asume que el archivo está separado por comas (formato CSV), La tabla sólo busca una fila de encabezado si es que se incluye la opción header. Las opciones posibles incluyen: csv: se procesan los datos como valores separados por comas, tsv: se procesan los datos como separados por tabulación, header: la tabla tiene una fila de encabezados (títulos). Si se incluyenn múltiples opciones, se deben ingresar como parámetros separados por comas. Todos los archivos son cargados y grabados usando codificación UTF-8. Este método es asíncrono, lo que significa que su ejecución puede no haber terminado antes de que se ejecute la siguiente línea del bosquejo. Si se llama a loadTable() dentro de preload() se garantiza que se complete la operación antes de que setup() y draw() sean llamadas. Fuera de preload(), puedes suplir una función callback para manejar el objeto.",
      "params": ["String: nombre de archivo o URL a cargar",
      "String|Strings: header, csv, tsv",
      "Función: función a ser ejecutada después de que loadTable() finalice, el arreglo es pasado como primer argumento. Si es exitosa, el objeto Table es pasado como primer argumento, en caso contrario se pasa el valor boolean false."],
      "returns": "Objeto Table conteniendo los datos"
    },
    "_loadXML": {
      "description": "Lee los contenidos de un archivo y crea un objeto XML con sus valores. Si el nombre del archivo es usado como parámetro, el archivo debe estar ubicado en el directorio del bosquejo. Alternativamente, el archivo puede ser cargado desde cualquier lugar del computador local usando una dirección absoluta (que empieza con / en Unix y Linux, o con una letra que simbolice el disco duro en Windows). También se puede usar como parámetro de nombre de archivo una URL para un archivo en una red. Este método es asíncrono, lo que significa que su ejecución puede no estar completa antes de que se ejecute la siguiente línea de código en el bosquejo. Llamar a loadXML() dentro de preload() garantiza que la operación se complete antes de que setup() y draw() sean llamados. Fuera de preload(), puedes suplir una función callBack para manejar el objeto.",
      "params": ["String: nombre de archivo o URL a cargar",
      "Función: función a ser ejecutada después de que loadXML() finalice, el objeto XML es pasado como primer argumento",
      "Función: la función a ser ejecutada si es que hay un error, la respuesta es pasada como primer argumento"],
      "returns": "objeto XML que contiene los datos"
    },
    "_httpGet": {
      "description": "Método para ejecutar una solicitud HTTP GET. Si no se especifica el tipo de datos, p5 tratará de adivinar basándose en la URL, usando texto por defecto.",
      "params": ["String: nombre del archivo o URL a cargar",
      "Objeto: parámetro de datos pasados con la solicitud enviada",
      "String: json, jsonp, xml o text",
      "Función: función a ser ejecutada después de que httpGet() finalice, los datos son pasados como primer argumento",
      "Función: función a ser ejecutada si es que hay un error, la respuesta es pasada como primer argumento"],
      "returns": "el objeto p5"
    },
    "_httpPost": {
      "description": "Método para ejecutar una solicitud HTTP POST. Si no se especifica el tipo de datos, p5 tratará de adivinar basándose en la URL, usando texto por defecto.",
      "params": ["String: nombre del archivo o URL a cargar",
      "Objeto: parámetro de datos pasados con la solicitud enviada",
      "String: json, jsonp, xml o text",
      "Función: función a ser ejecutada después de que httpPost() finalice, los datos son pasados como primer argumento",
      "Función: función a ser ejecutada si es que hay un error, la respuesta es pasada como primer argumento"],
      "returns": "el objeto p5"
    },
    "_httpDo": {
      "description": "Método para ejecutar una solicitud HTTP. Si no se especifica el tipo de datos, p5 tratará de adivinar basándose en la URL, usando texto por defecto. También puedes pasar un objeto especificando todos los parámetros de la solicitud siguiendo los ejemplos dentro de las llamadas de reqwest()",
      "params": ["String: nombre del archivo o URL a cargar",
      "Objeto: parámetro de datos pasados con la solicitud enviada",
      "String: json, jsonp, xml o text",
      "Función: función a ser ejecutada después de que httpDo() finalice, los datos son pasados como primer argumento",
      "Función: función a ser ejecutada si es que hay un error, la respuesta es pasada como primer argumento"],
      "returns": "el objeto p5"
    },
    "_save": {
      "description": "Graba una imagen, text, json, csv, wav o html. Hace que la descarga ocurra en el computador cliente. Notar que no es recomendado llamar a save() dentro de draw() si está en bucle, porque la función save() abrirá una ventana de diálogo en cada cuadro. El comportamiento por defecto es grabar el lienzo como una imagen. Puedes opcionalmente especificar un nombre de archivo. Por ejemplo: TODO. Alternativamente, el primer parámetro puede ser un puntero a un lienzo p5.Element, un arreglo de Strings, un arreglo de JSON, un objeto JSON, un p5.Table, un p5.Image, o un p5.SoundFile (requiere p5.sound). El segundo parámetro es el nombre del archivo (incluyendo la extensión). El tercer parámetro es para opciones específicas a este tipo de objeto. Este método grabará un archivo que se austa a los parámetros dados. Por ejemplo: TODO. ",
      "params": ["Objeto|String: si se provee un nombre de archivo, se grabará el lienzo como una imagen con la extensión png o jpg, dependiendo del nombre del archivo. Si se provee un objeto, se grabará dependiendo del objeto y el nombre del archivo (ver los ejemplos anteriores)",
      "String: Si se provee un objeto como el primer parámetro, entonces el segundo parámetro indica el nombre del archivo, y debe incluir la extensión apropiada (ver los ejemplos anteriores).",
      "Boolean|String: opciones adicionales depndiendo del tipo de archivo. Por ejemplo, cuando se graba un archivo JSON, true indica que la salida será optimizada según el tamaño del archivo, en vez de por legibilidad."],
      "returns": "el objeto p5"
    },
    "_saveJSON": {
      "description": "Escribe los contenidos de un arreglo o un objeto JSON a un archivo .json. El proceso de grabación del archivo y su ubicación pueden variar entre navegadores web.",
      "params": ["Arreglo|Objeto:",
      "String: ",
      "Boolean: si es verdadero (true), remueve los saltos de línea del archivo de salida para optimizar el tamaño del archivo, en desmedro de la legibilidad."],
      "returns": "el objeto p5"
    },
    "_saveStrings": {
      "description": "Escribe un arreglo de Strings a un archivo de texto, una línea por String. El proceso de grabación del archivo y su ubicación pueden variar entre navegadores web.",
      "params": ["Arreglo: arreglo de Strings a ser escrito",
      "String: nombre del archivo de salida"],
      "returns": "el objeto p5"
    },
    "_saveTable": {
      "description": "Escribe los contenidos de un objeto Table a un archivo. Por defecto es un archivo de texto con valores separados por coma (csv), pero también puede usar separación por tabulación (tsv), o generar una tabla HTML (html). El proceso de grabación del archivo y su ubicación pueden variar entre navegadores web.",
      "params": ["Table: el objeto Table a ser grabado en un archivo",
      "String: el nombre del archivo en el que Table será grabado",
      "String: puede ser tsv, csv o html."],
      "returns": "el objeto p5"
    },
    "_p5.Table": {
      "description": "Los objetos Table almacenan datos con múltiples filas y columnas, tal como una hoja de cálculo tradicional. Los objetos Table pueden ser generados desde cero, dinámicamente, o usando datos desde un archivo existente.",
      "params": ["Arreglo: un arreglo de objetos p5.TableRow"],
      "returns": "p5.Table: el objeto p5.Table generado"
    },
    "_p5.TableRow": {
      "description": "Un objeto TableRow representa una única fila de datos, grabados en columnas, de una tabla. Un objeto TableRow contiene tanto un arreglo ordenado, como un objeto JSON desordenado.",
      "params": ["String: opcional, puebla la fila con una serie de valores, separados por el separador",
      "String: por defecto, valores separados por coma (csv)"],
      "returns": "el objeto p5"
    },
    "_day": {
      "description": "p5.js se comunica con el reloj de tu computador. La función day() retorna el día actual como un valor entre 1 y 31.",
      "returns": "Getal: el día actual"
    },
    "_hour": {
      "description": "p5.js se comunica con el reloj de tu computador. La función hour() retorna la hora actual como un valor entre 0 y 23.",
      "returns": "Getal: la hora actual"
    },
    "_minute": {
      "description": "p5.js se comunica con el reloj de tu computador. La función minute() retorna el minuto actual como un valor entre 0 y 59.",
      "returns": "Getal: el minuto actual"
    },
    "_millis": {
      "description": "Retorna el Nummer de milisegundos (milésimas de segundo) desde que el programa empezó a correr. La información es usada a menudo para temporizar eventos y animar secuencias",
      "returns": "Getal: el Nummer de milisegundos desde que empezó el programa"
    },
    "_month": {
      "description": "p5.js se comunica con el reloj de tu computador. La función month() retorna el mes actual como un valor entre 1 y 12.",
      "returns": "Getal: el mes actual"
    },
    "second": {
      "description": "The second() functie retouneert de seconden van de systeemklok (0 - 59).",
      "returns": "Getal: huidige seconde (geheel getal)"
    },
    "year": {
      "description": "De functie year() retourneert het huidige jaar als een geheel getal (2014, 2015, 2016, enz.).",
      "returns": "Getal: het huidige jaar (geheel getal)"
    },
    "_p5.XML": {
      "description": "XML es una representación de un objeto XML, capaz de procesar código XML. Usa loadXML() para cargar archivos externos XML y crear objetos XML",
      "params": ["String:"],
      "returns": "p5.XML: el objeto p5.XML generado"
    },
    "_createVector": {
      "description": "Crea un nuevo objeto p5.Vector (el tipo de datos para almacenar vectores). Esto provee un vector de dos o tres dimensiones, específicamente un vector euclideano (también conocido como geométrico). Un vector es una entidad que tiene tanto magnitud como dirección.",
      "params": ["Getal: componente x del vector",
      "Getal: componente y del vector",
      "Getal: componente z del vector"],
      "returns": "el objeto p5"
    },
    "_p5.Vector": {
      "description": "Una clase para describir un vector de dos o tres dimensiones, específicamente un vector euclideano (también conocido como geométrico). Un vector es una entidad que tiene tanto magnitud como dirección. El tipo de datos, sin embargo, graba los componentes del vector (x, y para 2D y x,y,z para 3D). La magnitud y la dirección pueden ser calculados con los métodos mag() y heading(). En muchos de los ejemplos de p5.js, verás que p5.Vector es usado para describir una posición, velocidad o aceleración. Por ejemplo, si consideras un rectángulo moviéndose a lo largo de la pantalla, en cada instante tiene una posición (un vector que apunta desde el origen hasta su ubicación), una velocidad(la tasa a la que la posición del objeto cambia por unidad de tiempo, expresada como vector), y aceleración (la tasa a la que la velocidad del objeto cambia por unidad de tiempo, expresada como vector). Como los vectores representan grupos de valores, no podemos simplemente usar las operaciones tradicionales de adición, multiplicación, etc. En vez de eso, necesitaremos hacer matemática de vectores, lo que es simplificado con los métodos dentro de la clase p5.Vector.",
      "params": ["Getal: componente x del vector",
      "Getal: componente y del vector",
      "Getal: componente z del vector"],
      "returns": "el objeto p5"
    },
    "_abs": {
      "description": "Calcula el valor absoluto (magnitud) de un Nummer. Usa Math.abs(). El valor absoluto de un Nummer es siempre positivo.",
      "params": ["Getal: Nummer a computar"],
      "returns": "Getal: valor absoluto del Nummer dado"
    },
    "_ceil": {
      "description": "Calcula el entero más cercano que es mayor o igual que el valor del paráemtro. Usa Math.ceil(). Por ejemplo, ceil(9.03) retorna el valor 10.",
      "params": ["Getal: Nummer a redondear"],
      "returns": "Getal: Nummer redondeado hacia arriba"
    },
    "_constrain": {
      "description": "Restringe un valor a estar entre un valor mínimo y uno máximo.",
      "params": ["Getal: Nummer a restringir",
      "Getal: límite mínimo",
      "Getal: límite máximo"],
      "returns": "Getal: Nummer restringido"
    },
    "_dist": {
      "description": "Calcula la distancia entre dos puntos",
      "params": ["Getal: la coordenada x del primer punto",
      "Getal: la coordenada y del primer punto",
      "Getal: la coordenada z del primer punto",
      "Getal: la coordenada x del segundo punto",
      "Getal: la coordenada y del segundo punto",
      "Getal: la coordenada z del segundo punto"],
      "returns": "Getal: distancia entre los dos puntos"
    },
    "_exp": {
      "description": "Retorna el Nummer de Euler (2.71828...) elevado al parámetro n. Usa Math.exp().",
      "params": ["Getal: exponente a elevar"],
      "returns": "e^n"
    },
    "_floor": {
      "description": "Calcula el valor entero más cercano que es menor o igual al parámetro. Usa Math.floor().",
      "params": ["Getal: Nummer a ser redondeado hacia abajo"],
      "returns": "Getal: Nummer redondeado hacia abajo"
    },
    "_lerp": {
      "description": "Calcula un Nummer entre dos Nummers a un incremento específico. El parámetro amt es la cantidad a interpolar entre los dos valores donde 0.0 es igual al primer punto, 0.1 está muy cerca del primer punto, 0.5 está a medio camino entre ambos Nummers, etc. La función lerp es conveniente para crear movimiento a lo largo de un camino recto y para dibujar líneas punteadas.",
      "params": ["Getal: primer valor",
      "Getal: segundo valor",
      "Getal: Nummer entre 0.0 y 1.0"],
      "returns": "Getal: valor interpolado"
    },
    "_log": {
      "description": "Calcula el logaritmo natural (logaritmo con base e) de un Nummer. Esta función espera que el parámetro n sea de un valor más grande que 0.0. Usa Math.log().",
      "params": ["Getal: Nummer más grande que 0"],
      "returns": "Getal: logaritmo naturla de n"
    },
    "_mag": {
      "description": "Calcula la magnitud (o tamaño) de un vector. Un vector es una dirección en el espacio comúnmente usada en gráfica computacional y álgebra lineal. Como no tiene posición de inicio, la magnitud del vector puede ser pensada como la distancia entre la coordenada 0,0 a su valor x,y. Por lo tanto, mag() es un atajo a escribir dist(0, 0, x, y).",
      "params": ["Getal: primer valor",
      "Getal: segundo valor"],
      "returns": "Getal: magnitud del vector entre (0, 0) y (a, b)"
    },
    "_map": {
      "description": "Escala un nombre de un rango a otro rango. En el primer ejemplo anterior, el Nummer 25 es convertido de un valor en el rango entre 0 y 100 a un valor cuyo rango está entre el borde izquierdo de la ventana (0) y el borde derecho (ancho).",
      "params": ["Getal: el valor a ser convertido",
      "Getal: límite inferior del rango actual",
      "Getal: límite superior del rango actual",
      "Getal: límite inferior del rango deseado",
      "Getal: límite superior del rango deseado"],
      "returns": "Getal: Nummer escalado"
    },
    "_max": {
      "description": "Determina el valor más grande en una secuencia de Nummers, y luego retorna ese valor. max() acepta cualquier Nummer de parámetros tipo Nummer, o un arreglo de cualquier largo.",
      "params": ["Nummer|Arreglo: Nummers a comparar"],
      "returns": "Getal: Nummer máximo"
    },
    "_min": {
      "description": "Determina el valor más pequeño en una secuencia de Nummers, y luego retorna ese valor. max() acepta cualquier Nummer de parámetros tipo Nummer, o un arreglo de cualquier largo.",
      "params": ["Nummer|Arreglo: Nummers a comparar"],
    "returns": "Getal: Nummer mínimo"
    },
    "_norm": {
      "description": "Normaliza un Nummer de un rango a otro rango entre 0 y 1. Es idéntico a map(value, low, high, 0, 1). Los Nummers fuera del rango no son saturados a 0 o 1, porque los Nummers fuera de rango son muchas veces intencionales y útiles (ver el segundo ejemplo más arriba)",
      "params": ["Getal: valor entrante a ser normalizado",
      "Getal: límite inferior del rango actual",
      "Getal: límite superior del rango actual"],
      "returns": "Getal: Nummer normalizado"
    },
    "_pow": {
      "description": "Facilita las expresiones exponenciales. La función pow() es una manera eficiente de multiplicar Nummers po sí mismos (o sus recíprocos) en grandes cantidades. Por ejemplo, pow(3, 5) es equivalente a la expresión 3*3*3*3*3 y pow (3, -5) es equivalente a 1/3*3*3*3*3. Usa Math.pow().",
      "params": ["Getal: base de la expresión exponencial",
      "Getal: potencia a la que se eleva la base"],
      "returns": "n^e"
    },
    "_round": {
      "description": "Calcula el entero más cercano al parámetro n. Por ejemplo, round(133.8) retorna el valor 134. Usa la función Math.round().",
      "params": ["Getal: Nummer a redondear"],
      "returns": "Getal: Nummer redondeado"
    },
    "_sq": {
      "description": "Eleva al cuadrado un Nummer (lo multiplica por sí mismo), El resultado es siempre un Nummer positivo, porque multiplicar dos Nummers negativos siempre resulta en un Nummer positivo.",
      "params": ["Getal: Nummer a elevar al cuadrado"],
      "returns": "Getal: Nummer elevado al cuadrado"
    },
    "sqrt": {
      "description": "Berekent de vierkantswortel van een getal. De vierkantswortel van een getal is altijd positief, ook al is er mogelijk een geldige negatieve wortel. De vierkantswortel s van nummer a is zodanig dat s * s = a. Het is het omgekeerde van kwadrateren.",
      "params": ["Getal: niet negatief getal."],
      "returns": "Getal: de vierkantswortel ( resultaat * resultaat = n)."
    },
    "_noise": {
      "description": "Retorna el valor del ruido Perlin en las coordenadas específicas. El ruido Perlin es un generador de secuencias aleatorias produciendo una sucesión de Nummers más naturalmente ordenada y armónica, en comparación con la función estándar random(). Fue inventada por Ken Perlin en los 1980s y ha sido usada desde entonces en aplicaciones gráficas para producir texturas procedurales, movimiento natural, figuras, terrenos, etc. La principal diferencia con la función random() es definida en una espacio infinito n-dimensional donde cada par de coordenadas corresponde a un valor fijo semi-aleatorio (fijado solo durante el tiempo de vida del programa; ver la función noiseSeed()). p5.js puede calcular ruido 1D, 2D y 3D, dependiendo del Nummer de coordenadas dado. El valor resultante siempre estará entre 0.0 y 1.0. El valor de ruido puede ser animado moviéndose a través del espacio del ruido como fue demostrado en el ejemplo superior. Las dimensiones segunda y tercera también pueden ser interpretadas como tiempo. El ruido está estructurado de forma similar a una señal de audio, con respecto al uso de la función de las frecuencias. De forma similar al conecpto de armónicas en física, el ruido Perlin es calculado a lo largo de varias octavas que se han sumado para dar forma al resultado final. Otra manera de ajustar el caracter de la secuencia resultante es la escala de las coordenadas de entrada. Como la función trabaja en un espacio infinito, el valor de las coordenadas no importa como tal, solo la distancia entre las coordenadas sucesivas importa (por ejemplo: cuando se usa noise() dentro de un bucle). Como regla general, a menor la diferencia entre coordenadas, más suave es el ruido resultante. Pasos entre 0.005 y 0.03 funcionan mejor para la mayor parte de las aplicaciones, pero esto diferirá dependiendo del uso.",
      "params": ["Getal: coordenada x en el espacio del ruido",
      "Getal: coordenada y en el espacio del ruido",
      "Getal: coordenada z en el espacio del ruido"],
      "returns": "valor de ruido Perlin (entre 0 y 1) en las coordenadas especificadas"
    },
    "_noiseDetail": {
      "description": "Ajusta el caracter y nivel de detalle producido por la función de ruido Perlin. Similar al concepto de armónicas en física, el ruido es calculado a lo largo de varias octavas. Las octavas más graves contribuyen de forma más significativa a la señal de salida y como define la intensidad general del ruido, mientras que las octavas más altas crean detalles más finos en la secuencia de ruido. Por defecto, el ruido es calculado a lo largo de 4 octavas, con cada octava contribuyendo exactamente la mitad que su predecesora, partiendo con una intensidad de 50% para la primera octava. Este tamaño de caída puede ser cambiado al añadir un parámetro adicional a la función. Por ejemplo, un factor de caída de 75% significa que cada octava tendrá un 75% de impacto (25% menos) que la octava anterior. Cualquier valor entre 0.0 y 1.0 es válido, sin embargo nota que valores superiores a 0.5 pueden resultar en que noise() retorne valores mayores a 1.0. Al cambiar estos parámetros, la señal creada por noise() puede ser adaptada para calzar con necesidades y características específicas.",
      "params": ["Getal: Nummer de octavas a ser usadas por el ruido",
      "Getal: factor de caída para cada octava"],
      "returns": "el objeto p5"
    },
    "_noiseSeed": {
      "description": "Define el valor semilla para la función noise(). Por defecto, noise() produce diferentes resultados cada vez que el programa es ejecutado. Defines el parámetro value a una constante para que retorne la misma secuencia de Nummers pseudo-aleatorios cada vez que el programa es ejecutado",
      "params": ["Getal: el valor semilla"],
      "returns": "el objeto p5"
    },
    "acos": {
      "description": "De inverse van de cosinus functie ( cos() ), retourneert de boogcosinus van een waarde. Deze functie verwacht dat de gegeven waarde in het bereik van -1 tot 1 en en het resultaat is in het bereik van 0 tot PI (3.1415927).",
      "params": ["Getal: de waarde waarvan de boogcosinus moet worden geretourneerd"],
      "returns": "Getal: de boogcosinus van de gegeven waarde"
    },
    "asin": {
      "description": "De asin() functie berekent de inverse van sin(),met als resultaat de boogsinus van een waarde. Deze functie verwacht dat de gegeven waarde in het bereik van -1 tot 1 en en het resultaat is in het bereik van -PI / 2 tot PI / 2.",
      "params": ["Getal: de waarde waarvan de boog sinus moet worden geretourneerd."],
      "returns": "Getal: de boogsinus van de gegeven waarde"
    },
    "_atan": {
      "description": "El inverso de la función tan(), retorna el arcotangente de un valor. Esta función espera valores entre -Infinito e Infinito (exclusivo) y los valores retornados están en el rango entre -PI/2  y PI/2 .",
      "params": ["Getal: el valor al que se aplica arcotangente"],
      "returns": "Getal: el arcotangente del valor"
    },
    "_atan2": {
      "description": "Calcula el ángulo (en radianes) desde un punto específico al origen, medido desde el eje x positivo. Los valores retornados son de tipo float entre  -PI/2  y PI/2. La función atan2() es más frecuentemente usada para orientar figuras figuras geométricas según la posición del cursor. Nota: la coordenada y del punto es el primer parámetro, y la coordenada x es el segundo parámetro, debido a la estructura para calcular la tangente.",
      "params": ["Getal: coordenada y del punto",
      "Getal: coordenada x del punto"],
      "returns": "Getal: el arcotangente del punto dado"
    },
    "_cos": {
      "description": "calcula el coseno de un ángulo. Esta función toma en cuenta el modo actual de ángulo según angleMode(). Los valores son retornados en el rango entre -1 y 1.",
      "params": ["Getal: el ángulo"],
      "returns": "Getal: el coseno del ángulo"
    },
    "_sin": {
      "description": "calcula el seno de un ángulo. Esta función toma en cuenta el modo actual de ángulo según angleMode(). Los valores son retornados en el rango entre -1 y 1.",
      "params": ["Getal: el ángulo"],
      "returns": "Getal: el seno del ángulo"
    },
    "_tan": {
      "description": "calcula la tangente de un ángulo. Esta función toma en cuenta el modo actual de ángulo según angleMode(). Los valores son retornados en el rango entre -1 y 1.",
      "params": ["Getal: el ángulo"],
      "returns": "Getal: la tangente del ángulo"
    },
    "_degrees": {
      "description": "Convierte una medida en radianes a su correspondiente valor en grados. Radianes y grados son dos maneras de calcular lo mismo. Hay 360 grados en un círculo y 2*PI radianes en un círculo. Por ejemplo, 90 grados equivalen a PI/2 radianes.",
      "params": ["Getal: valor en radianes a ser convertido a grados."],
      "returns": "el ángulo convertido"
    },
    "_radians": {
      "description": "Convierte una medida en grados a su correspondiente valor en radianes. Radianes y grados son dos maneras de calcular lo mismo. Hay 360 grados en un círculo y 2*PI radianes en un círculo. Por ejemplo, 90 grados equivalen a PI/2 radianes.",
      "params": ["Getal: valor en grados a ser convertido a radianes."],
      "returns": "el ángulo convertido"
    },
    "_angleMode": {
      "description": "Define el modo actual de p5 para interpretar ángulos. El modo por defecto es en RADIANS (radianes).",
      "params": ["CONSTANTE: puede ser RADIANS (radianes) o DEGREES (grados)"],
      "returns": "el objeto p5"
    },
    "_randomSeed": {
      "description": "Define la semilla para la función random(). Por defecto, la función random() produce diferentes resultados cada vez que el programa es ejecutado. Definir el parámetro semilla como una constante hace que retorne la misma secuencia de Nummers pseudo-aleatorios cada vez que el programa es ejecutado.",
      "params": ["Getal: el valor semilla"],
      "returns": "el objeto p5"
    },
    "_random": {
      "description": "Retorna un Nummer aleaotorio de tipo float (punto flotante). Acepta 0, 1 o 2 argumentos. Si no se le da un argumento, retorna un Nummer aleatorio entre 0 y 1 (sin incluir 1). Si se da un argumento y es un Nummer, retorna un Nummer aleatorio entre 0 y hasta (pero sin incluir) el parámetro. Si se da un argumento y es un arreglo, retorna una elemento al azar del arreglo. Si se dan dos argumentos, retorna un Nummer aleatorio entre el primer argumento y hasta (pero sin incluir) el segundo argumento.",
      "params": ["Getal: el límite inferior (inclusivo)",
      "Getal: el límite superio (exclusivo)",
      "Arreglo: el arreglo del cual se elige"],
      "returns": "Getal: el Nummer aleatorio o un elemento aleatorio de un conjunto de opciones"
    },
    "_randomGaussian": {
      "description": "Retorna un Nummer aleatorio ajjustado a una distribución Gaussiana o normal. No existe teóricamente un valor mínimo o máximo que la función randomGaussian() pueda retornar. En vez de eso, existe solo una muy baja probabilidad de retornar valores lejos de la media, y una alta probabilidad de retornar Nummers cercanos a la media. Acepta 0, 1 o 2 argumentos. Si no tiene argumentos, retorna una media de 0 y una desviación estándar de 1. Si tiene un argumento, el argumento es la media (y la desviación estándar es 1). Si tiene dos argumentos, el primero es la media y el segundo es la desviación estándar.",
      "params": ["Getal: la media",
      "Getal: la desviación estándar"],
      "returns": "el Nummer aleatorio"
    },
    "_textAlign": {
      "description": "Define el alineamiento actual para dibujar texto. Acepta dos argumentos: horizAlign(LEFT, CENTER o RIGHT) y vertAlign(TOP, BOTTOM, CENTER, o BASELINE). El parámetro horizAlign se refiere al valor x de la función text(), mientras que vel parámetro vertAlign al valor y. Así que si escribes textAlign(LEFT), estás alineando el borde izquierdo de tu texto al valor x dado en la función text(). Si escribes textAlign(RIGHT, TOP), estás alineando el borde derecho de tu texto con el valor x y el borde superior con el valor y del texto.",
      "params": ["Constante: alineamiento horizontal, puede ser LEFT, CENTER o RIGHT",
      "Constante: alineamiento vertical, puede ser TOP, BOTTOM, CENTER o BASELINE"],
      "returns": "el objeto p5"
    },
    "_textLeading": {
      "description": "Define o retorna el espaciado, en pixeles, entre líneas de texto. Esta configuración será usada en todas las llamadas posteriores a la función text().",
      "params": ["Getal: el tamaño en pixeles de espaciamiento entre líneas"],
      "returns": "el objeto p5"
    },
    "_textSize": {
      "description": "Define o retorna el tamaño actual de la tipografía. Este tamaño será usado en todas las llamadas posteriores a la función text(). El tamaño de la tipografía es medido en pixeles.",
      "params": ["Getal: el tamaño en pixeles de las letras en pixeles"],
      "returns": "el objeto p5"
    },
    "_textStyle": {
      "description": "Define o retorna el estilo actual de la tipografía. Puede ser NORMAL (normal), ITALIC (cursivo) o BOLD (destacado). Notar que puede ser anulado por estilo CSS. Para tipografías que no sean de sistema (opentype, truetype, etc.), usa loadFont().",
      "params": ["Nummer|Constante: estilo del texto, puede ser NORMAL, ITALIC o BOLD"],
      "returns": "el objeto p5"
    },
    "_textWidth": {
      "description": "Berekent de lengte (aantal karakters) van een string.",
      "params": ["String: invoer string"],
      "returns": "Getal: Aantal characters"
    },
    "_text": {
      "description": "Dibuja texto en la pantalla. Muestra la información especificada en el primer parámetro en la pantalla, en la posición especificada por los parámetros adicionales. Una fuente por defecto será usada a menos que una fuente sea definida por la función textFont() y un tamaño por defecto será usado a menos que se use la función textSize(). Cambia el color del texto con la función fill(). Cambia la apariencia del texto con las funciones stroke() y strokeWeight(). El texto se muestra en relación a la función textAlign(), que da la opción de dibujar a la izuiqerda, derecha y centro de las coordenadas. Los parámetros x2 e y2 definen un área rectangular donde mostrar el texto y solo puede ser usado por los datos tipo String. Cuando estos parámetros son especificados, son interpretados según la configuración de rectMode(). El texto que no cabe completamente dentro del rectángulo especificado no será dibujado en pantalla.",
      "params": ["String: símbolos alfanuméricos a ser mostrados",
      "Getal: coordenada x del texto",
      "Getal: coordenada y del texto",
      "Getal: por defecto, el ancho de la caja contenedora del texto, ver rectMode() para más información",
      "Getal: por defecto, la altura de la caja contenedora del texto, ver rectMode() para más información"],
      "returns": "Objeto"
    },
    "_textFont": {
      "description": "Define la función actual con la que se dibujará el contenido de la función text()",
      "params": ["Objeto|String: una fuente cargada con loadFont(), o un String representando una tipografía segura de la web (una fuente ampliamente disponible a lo largo de todos los sistemas)."],
      "returns": "Objeto"
    },
    "_p5.Font": {
      "description": "Clase base para manipulación de tipografía",
      "params": ["Objeto: puntero a la instancia p5"],
      "returns": "el objeto p5"
    },
    "_append": {
      "description": "Añade un valor al final de un arreglo. Extiende el largo de un arreglo en una unidad. Usa la función Array.push()",
      "params": ["Arreglo: Arreglo al que se agregará el dato",
      "Cualquiera: a ser añadido al arreglo"],
      "returns": "el objeto p5"
    },
    "_arrayCopy": {
      "description": "Copia el arreglo (o una parte del arreglo) a otro arreglo. El arreglo fuente es copiado al arreglo de destino, empezando por la posición especificada por srcPosition y a la posición especificada por dstPosition. El Nummer de elementos a copiar es determinado por el largo. Notar que al copiar valores se sobreescriben los valores existentes en el arreglo de destino. Para anexar valores en vez de sobreescribirlos, usa la función concat(). La versión simplificada con dos argumentos, arrayCopy(src, dest), copia un arreglo entero a otro del mismo tamaño. Es equivaletne a arrayCopy(src, 0, dst, 0, src.length). Usar esta función es mucho más eficiente para copiar datos de un arreglo que iterar con un bucle for() y copiar cada elemento individualmente. ",
      "params": ["Arreglo: el arreglo fuente",
      "Getal: posición inicial en el arreglo fuente",
      "Arreglo: el arreglo de destino",
      "Getal: posición inicial del arreglo de destino",
      "Getal: númeor de elementos del arreglo a ser copiados"],
      "returns": "el objeto p5"
    },
    "_concat": {
      "description": "Concatena dos arreglos, usa la función Array.concat(). No modifica los arreglos de entrada.",
      "params": ["Arreglo: primer arreglo a concatenar",
      "Arreglo: segundo arreglo a concatenar"],
      "returns": "Arreglo: el arreglo concatenado"
    },
    "_reverse": {
      "description": "Invierte el orden un arreglo, usa Array.reverse().",
      "params": ["Arreglo: arreglo a ser invertido"],
      "returns": "el objeto p5"
    },
    "_shorten": {
      "description": "Disminuye un arreglo en un elemento y retorna el arreglo más corto, usa Array.pop().",
      "params": ["Lista: arreglo a acortar"],
      "returns": "Arreglo: el arreglo acortado"
    },
    "_shuffle": {
      "description": "Ordena aleatoriamente los elementos de un arreglo. Implementa el algoritmo Fisher Yates.",
      "params": ["Arreglo: Arreglo a ordenar",
      "Boolean: modifica el arreglo"],
      "returns": "Arreglo: retorna el arreglo ordenado"
    },
    "_sort": {
      "description": "Ordena un arreglo de Nummers, desde el más pequeño al más grande, o pone un arreglo de palabras en orden alfabético. El arreglo original no es modificado, un nuevo arreglo ordenado es retornado. El parámetro count define el Nummer de elementos a ordenar. Por ejemplo, si hay 12 elementos en un arreglo y count es 5, los primeros 5 elementos del arreglo serán ordenados.",
      "params": ["Arreglo: arreglo a ordenar",
      "Getal: Nummer de elementos a ordenar, empezando desde 0"],
      "returns": "el objeto p5"
    },
    "_splice": {
      "description": "Inserta un valor o un arreglo de valores en un arreglo existente El primer parámetro especifica el arreglo inicial a ser modificado, y el segundo parámetro define los datos a insertarse. El tercer parámetro es un índice que especifica la posición del arreglo a partir de la que se insertarán los datos. Recuerda que el índice del arreglo empieza en 0, así que la primera posición es 0, la segunda es 1, etc.",
      "params": ["Arreglo: arreglo a ser modificado",
      "Cualquiera: valor a ser introducido",
      "Getal: posición del arreglo donde se inserta el dato"],
      "returns": "el objeto p5"
    },
    "_subset": {
      "description": "Extrae un arreglo de elementos de un arreglo existente. El parámetro list define el arreglo desde el cual los elementos serán copiados, y los parámetros start y count especifican cuáles elementos extraer. Si no especifica count, los elementos serán extraidos desde el principio. Esta función no modifica el arreglo original",
      "params": ["Arreglo: arreglo del cual se extrae",
      "Getal: posición de donde empezar a extraer",
      "Getal: Nummer de valores a extraer"],
      "returns": "Arreglo: arreglo de elementos extraidos"
    },
    "_float": {
      "description": "Convierte un String a su representación de punto flotante. Los contenidos de un String deben parecerse a un Nummer, en otro caso NaN es retornado. Por ejemplo, float('1234.56') evalua a 1234.56, pero float('giraffe') retorna NaN. Cuando un arreglo de valores es pasado, un arreglo de floats del mismo largo es retornado.",
      "params": ["String: string a ser procesado"],
      "returns": "Getal: representación en punto flotante de un string"
    },
    "_int": {
      "description": "Convierte un boolean, string o float a su representación en Nummer entero. Cuando un arreglo de valores es introducido, entonces un arreglo de enteros de la misma longitud es retornado.",
      "params": ["String|Boolean|Nummer|Arreglo: valor a procesar"],
      "returns": "Getal: valor representado como entero"
    },
    "_str": {
      "description": "Convierte un boolean, string, o Nummer a su representación en string. Cuando un arreglo de valores es introducido, entonces un arreglo de strings de la misma longitud es retornado.",
      "params": ["String|Boolean|Nummer|Arreglo: valor a procesar"],
      "returns": "String: valor representado como string"
    },
    "_boolean": {
      "description": "Convierte un Nummer o string a su representación en boolean. Para Nummers, cualquier valor distinto de cero (positivo o ne gativo), evalua a true, mientras que cero evalua a falso. Para un string, el valor true evalua a true, mientras que cualquier otro valor evalua a falso. Cuando un arreglo de Nummers o strings es introducido, entonces un arreglo de booleans de la misma longitud es retornado.",
      "params": ["String|Boolean|Nummer|Arreglo: valor a procesar"],
      "returns": "Boolean: representación en formato boolean del valor"
    },
    "_byte": {
      "description": "Convierte un Nummer, string o boolean a su representación en byte. Un byte puede solo ser un Nummer entero entre -128 y 127, así que cuando un valor fuera de este rango es convertido, se hace wrap a la representación correspondiente en byte. Cuando un arreglo de Nummers, string, o booleans es introducido, entonces un arreglo de bytes de la misma longitud es retornado.",
      "params": ["String|Boolean|Nummer|Arreglo: valor a procesar"],
      "returns": "Getal: representación en formato byte del valor"
    },
    "_char": {
      "description": "Convierte un Nummer o string a su representaciómo como un string de un único caracter. Si se provee un parámetro, es primero pasado como entero y luego evaluado como un string de un único caracter. Cuando un arreglo de Nummers o strings es introducido, entonces un arreglo de strings de un único caracter de la misma longitud es retornado.",
      "params": ["String|Nummer|Arreglo: valor a procesar"],
      "returns": "String: representación en formato string del valor"
    },
    "_unchar": {
      "description": "Convierte un string de un único caracter a su correspondiente representación como valor entero. Cuando un arreglo de strings de un caracter es introducido, entonces un arreglo de enteros de la misma longitud es retornado.",
      "params": ["String|Arreglo: valor a procesar"],
      "returns": "Getal: representación en formato entero del valor"
    },
    "_hex": {
      "description": "Convierte un Nummer a su correspondiente representación como hexadecimal. Si se ingersa un segundo parámetro, es usado para definir el Nummer de caracteres a generar en la notación hexadecimal. Cuando un arreglo es introducido, entonces un arreglo de strings en notación hexadecimal de la misma longitud es retornado.",
      "params": ["Nummer|Arreglo: valor a procesar"],
      "returns": "String: representación en formato string hexadecimal del valor"
    },
    "_unhex": {
      "description": "Convierte una representación en string de un Nummer hexadecimal a su correspondiente representación como valor entero. Cuando un arreglo de strings en notación hexadecimal es introducido, entonces un arreglo de enteros de la misma longitud es retornado.",
      "params": ["String|Arreglo: valor a procesar"],
      "returns": "Getal: representación en formato entero del valor hexadecimal"
    },
    "_join": {
      "description": "Combina una arreglo de Strings en un String, cada uno separado por los caracteres usados como parámetro separator. Para unir arreglos de enteros o floats, es necesario primero convertirlos a Strings usando las funciones nf() o nfs().",
      "params": ["Arreglo: arreglo de Strings a ser unidos",
      "String: String a ser posicionado entre cada item"],
      "returns": "String: String unificado"
    },
    "_match": {
      "description": "Esta función es usada para aplicar una expresión regular a una porción de texto,  y retorna grupos coincidentes (elementos encontrados entre paréntesis) como un arreglo de Strings. Si no existen coincidencias, se retorna el valor null. Si no se especifican grupos en la expresión regular, pero la secuencia coincide, un arreglo de largo 1 (con el texto coincidente como primer elemento del arreglo) será retornado. Para usar la función, primero comprueba si el resultado es null. Si el resultado es null, entonces la secuencia no tuvo coincidencias. Si la secuencia tuvo coincidencias, retorna un arreglo. Si exsiten grupos (especificados como conjuntos de paréntesis) en la expresión regular, entonces los contenidos de cada uno serán retornados en el arreglo. El elemento[0] de una coincidencia de expresión regular retorna el string coincidente, y el grupo de coincidencia empieza en el elemento[1] (el primer grupo es [1], el segundo es [2], etc).",
      "params": ["String: el String a ser buscado",
      "String: la expresión regular a ser usada para buscar coincidencias"],
      "returns": "Arreglo: arreglo de Strings encontrados"
    },
    "_matchAll": {
      "description": "Esta función es usada para aplicar una expresión regular a una porción de texto,  y retorna una lista de grupos coincidentes (elementos encontrados entre paréntesis) como un arreglo de Strings bidimensional. Si no existen coincidencias, se retorna el valor null. Si no se especifican grupos en la expresión regular, pero la secuencia coincide, un arreglo de dos dimensiones es retornado, pero es de largo 1. Para usar la función, primero comprueba si el resultado es null. Si el resultado es null, entonces la secuencia no tuvo coincidencias. Si la secuencia tuvo coincidencias, retorna un arreglo 2D. Si exsiten grupos (especificados como conjuntos de paréntesis) en la expresión regular, entonces los contenidos de cada uno serán retornados en el arreglo. El elemento[i][0] de una coincidencia de expresión regular retorna el string coincidente completo, y el grupo de coincidencia empieza en el elemento[i][1] (el primer grupo es [i][1], el segundo es [i][2], etc).",
      "params": ["String: el String a ser buscado",
      "String: la expresión regular a ser usada para buscar coincidencias"],
      "returns": "Arreglo: arreglo 2D de Strings encontrados"
    },
    "_nf": {
      "description": "Función de utilidad para formatear Nummers a strings. Existen dos veriones: una para formatear floats, y una para formatear enteros. Los valores de los dígitos y los parámetros left y right siempre deben ser enteros positivos",
      "params": ["Nummer|Arreglo: el Nummer a formatear",
      "Getal: Nummer de dígitos a la izquierda del punto decimal",
      "Getal: Nummer de dígitos a la derecha del punto decimal"],
      "returns": "String|Arreglo: String formateada"
    },
    "_nfc": {
      "description": "Función de utilidad para formatear Nummers en strings y poner las comas apropiadas para señalar múltiplos de mil. Hay dos versiones: una para Nummers enteros y otra para arreglos de enteros. El valor del parámetro right debe siempre ser un entero positivo.",
      "params": ["Nummer|Arreglo: el Nummer a formatear",
      "Getal: Nummer de dígitos a la derecha del punto decimal"],
      "returns": "String|Arreglo: String formateada"
    },
    "_nfp": {
      "description": "Función de utilidad para formatear Nummers en strings. Similar a nf() pero pone un signo + en frente de los Nummers positivos y un signo - en frente de Nummers negativos. Hay dos versiones, una para formatear floats y otra para formatear enteros. Los valores de los parámetros left y right deben siempre ser enteros positivos.",
      "params": ["Nummer|Arreglo: el Nummer a formatear",
      "Getal: Nummer de dígitos a la izquierda del punto decimal",
      "Getal: Nummer de dígitos a la derecha del punto decimal"],
      "returns": "String|Arreglo: String formateada"
    },
    "_nfs": {
      "description": "Función de utilidad para formatear Nummers en strings. Similar a nf() pero pone un espacio en frente de los Nummers positivos y un signo - en frente de Nummers negativos. Hay dos versiones, una para formatear floats y otra para formatear enteros. Los valores de los parámetros left y right deben siempre ser enteros positivos.",
      "params": ["Nummer|Arreglo: el Nummer a formatear",
      "Getal: Nummer de dígitos a la izquierda del punto decimal",
      "Getal: Nummer de dígitos a la derecha del punto decimal"],
      "returns": "String|Arreglo: String formateada"
    },
    "_split": {
      "description": "La función split usa String.split(), corta un String en pedazos usando un caracter o String como delimitador. El parámetro delim especifica el caracter o caracteres que marcan los bordes entre cada pieza. Un arreglo String[] es retornado, que contiene cada una de las piezas. La función splitTokens() funciona de forma similar, excepto que divide usango un rango de caracteres en vez de usar un caracter o una secuencia de caracteres específicos.",
      "params": ["String: el String a ser dividido",
      "String: el String usado para separar los datos"],
      "returns": "Arreglo: arreglo de Strings"
    },
    "_splitTokens": {
      "description": "La función splitTokens() divide un String en uno o varios caracteres delimitadores o tokens. El parámetro delim especifica el o los caracteres a ser usados como borde. Si no se especifican caracteres delim, cualquier caracter tipo whitespace será usado para dividir. Los caracteres whitespace incluyen tabulación (\t), nueva línea (\n), retorno de carro (\r), entrada de formulario (\f), y espacio.",
      "params": ["String: el String a ser dividido",
      "String: lista de Strings individuales que serán usados como separadores"],
      "returns": "Arreglo: arreglo de Strings"
    },
    "_trim": {
      "description": "Remueve caracteres tipo whitespace (espacio en blanco) del comienzo y el final de un String. En adición a los caracteres estámdar de whitespace como espacio, retorno de carro y tabulación, esta función también remueve el caracter Unicode nbsp.",
      "params": ["String|Arreglo: un String o arreglo de Strings a ser recortados."],
      "returns": "String|Arreglo: un String o arreglo de Strings recortados."
    },
    "_camera": {
      "description": "Define la posición de la cámara",
      "params": ["Getal: valor de la posición de la cámara en el eje x",
      "Getal: valor de la posición de la cámara en el eje y",
      "Getal: valor de la posición de la cámara en el eje z"],
      "returns": "p5: el objeto p5"
    },
    "_perspective": {
      "description": "Define la perspectiva de la cámara",
      "params": ["Getal: frustum del campo de visión vertical de la cámara, de abajo hacia arriba, en grados",
      "Getal: frustum de la relación de aspecto de la cámara",
      "Getal: frustum del largo del plano cercano",
      "Getal: frustum del largo del plano lejano"],
      "returns": "p5: el objeto p5"
    },
    "_ortho": {
      "description": "Define la cámara ortogonal",
      "params": ["Getal: define el frustum del plano izquierdo de la cámara",
      "Getal: define el frustum del plano derecho de la cámara",
      "Getal: define el frustum del plano inferior de la cámara",
      "Getal: define el frustum del plano superior de la cámara",
      "Getal: define el frustum del plano cercano de la cámara",
      "Getal: define el frustum del plano lejano de la cámara"],
      "returns": "p5: el objeto p5"
    },
    "_ambientLight": {
      "description": "Crea una luz ambiente con color",
      "params": ["Nummer|Arreglo|String|p5.Color: valor de gris, rojo o tinte (dependiendo del modo de color actual), o arreglo de color o String de color CSS",
      "Getal: opcional, valor de verde o saturación",
      "Getal: opcional, valor de azul o brillo",
      "Getal: opcional, valor de opacidad"],
      "returns": "el objeto p5"
    },

    "_directionalLight": {
      "description": "Crea una luz direccional con color y dirección",
      "params": ["Nummer|Arreglo|String|p5.Color: valor de gris, rojo o tinte (dependiendo del modo de color actual), o arreglo de color o String de color CSS",
      "Getal: opcional, valor de verde o saturación",
      "Getal: opcional, valor de azul o brillo",
      "Getal: opcional, valor de opacidad",
      "Nummer|p5.Vector: dirección del eje x o un p5.Vector",
      "Getal: opcional, dirección del eje y",
      "Getal: opcional, dirección del eje z"],
      "returns": "el objeto p5"
    },
    "_pointLight": {
      "description": "Crea una luz puntual con color y posición",
      "params": ["Nummer|Arreglo|String|p5.Color: valor de gris, rojo o tinte (dependiendo del modo de color actual), o arreglo de color o String de color CSS",
      "Getal: opcional, valor de verde o saturación",
      "Getal: opcional, valor de azul o brillo",
      "Getal: opcional, valor de opacidad",
      "Nummer|p5.Vector: dirección del eje x o un p5.Vector",
      "Getal: opcional, dirección del eje y",
      "Getal: opcional, dirección del eje z"],
      "returns": "p5: el objeto p5"
    },
    "_normalMaterial": {
      "description": "Material normal para geometría. Puedes ver todos los posibles materiales en este ejemplo (TODO).",
      "returns": "p5: el objeto p5"
    },
    "_texture": {
      "description": "Textura para geometría. Puedes ver todos los posibles materiales en este ejemplo (TODO).",
      "params": ["p5.Image|p5.MediaElement|p5.Graphics: gráfica bidimensional para hacer render como textura."],
      "returns": "p5: el objeto p5"
    },
    "_ambientMaterial": {
      "description": "Material ambiente para geometría con un color dado. Puedes ver todos los posibles materiales en este ejemplo (TODO).",
      "params": ["Nummer|Arreglo|String|p5.Color: valor de gris, rojo o tinte (dependiendo del modo de color), o arreglo de color, o String de color CSS",
      "Getal: opcional, valor de verde o saturación",
      "Getal: opcional, valor de azul o brillo",
      "Getal: opcional, valor de opacidad"],
      "returns": "p5: el objeto p5"
    },
    "_specularMaterial": {
      "description": "Material espejo para geometría con un color dado. Puedes ver todos los posibles materiales en este ejemplo (TODO).",
      "params": ["Nummer|Arreglo|String|p5.Color: valor de gris, rojo o tinte (dependiendo del modo de color), o arreglo de color, o String de color CSS",
      "Getal: opcional, valor de verde o saturación",
      "Getal: opcional, valor de azul o brillo",
      "Getal: opcional, valor de opacidad"],
      "returns": "p5: el objeto p5"
    },
    "_p5.RendererGL": {
      "description": "TODO",
      "returns": "p5: el objeto p5"
    },
    "_p5.Shader": {
      "description": "Shader class voor WEBGL mode",
      "params": ["p5.RendererGL: una instancia de p5.RendererGL que servirá de contexto GL para este nuevo p5.Shader",
      "String: código fuente para el vertex shader (en forma de string)",
      "String: código fuente para el fragment shader (en forma de string)"],
      "methods": ["Wrapper de las funciones gl.uniform. Como almacenamos información de uniform en el shader, la podemos usar para revisar los datos provistos y llamar a la función apropiada."]
    }
  },
  "_p5.Image": {
    "loadPixels": {
      "description": "blah",
      "params": ["Numero: blah",
                 "Numero: blah"],
      "returns": "TODO"
    }
  },
  "_p5.Element": {
    "description": "Clase base para todos los elementos añadidos al bosuqejo, incluyendo lienzo, buffers de gráficas, y otros elementos HTML. Los métodos en azul están incluidos en la funcionalidad base, los métodos en marrón son añadidos con la biblioteca p5.dom. No se ejecutan directamente, pero los objetos p5.Element son creados llamando a las funciones createCanvas(), createGraphics(), o en la biblioteca p5.dom, createDiv, createImg, createInput, etc.",
    "params": ["String: node DOM envolvente.",
    "Objeto: puntero a instancia p5."],
    "returns": "TODO"
  }
}
